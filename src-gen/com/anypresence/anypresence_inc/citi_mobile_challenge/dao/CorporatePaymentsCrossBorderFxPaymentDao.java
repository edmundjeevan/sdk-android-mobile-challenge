package com.anypresence.anypresence_inc.citi_mobile_challenge.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsCrossBorderFxPayment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CORPORATEPAYMENTSCROSSBORDERFXPAYMENTS.
 */
public class CorporatePaymentsCrossBorderFxPaymentDao
		extends
			AbstractDao<CorporatePaymentsCrossBorderFxPayment, Long> {

	public static final String TABLENAME = "CORPORATEPAYMENTSCROSSBORDERFXPAYMENTS";

	/**
	 * Properties of entity CorporatePaymentsCrossBorderFxPayment.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property BeneficiaryAccount = new Property(1,
				String.class, "beneficiaryAccount", false,
				"BENEFICIARY_ACCOUNT");
		public final static Property BeneficiaryAddress = new Property(2,
				String.class, "beneficiaryAddress", false,
				"BENEFICIARY_ADDRESS");
		public final static Property BeneficiaryBank = new Property(3,
				String.class, "beneficiaryBank", false, "BENEFICIARY_BANK");
		public final static Property BeneficiaryName = new Property(4,
				String.class, "beneficiaryName", false, "BENEFICIARY_NAME");
		public final static Property CitiRef = new Property(5, String.class,
				"citiRef", false, "CITI_REF");
		public final static Property CreatedBy = new Property(6, String.class,
				"createdBy", false, "CREATED_BY");
		public final static Property CreatedOn = new Property(7, String.class,
				"createdOn", false, "CREATED_ON");
		public final static Property CustomerTxnRef = new Property(8,
				String.class, "customerTxnRef", false, "CUSTOMER_TXN_REF");
		public final static Property DebtorAccount = new Property(9,
				String.class, "debtorAccount", false, "DEBTOR_ACCOUNT");
		public final static Property DebtorAddress = new Property(10,
				String.class, "debtorAddress", false, "DEBTOR_ADDRESS");
		public final static Property DebtorName = new Property(11,
				String.class, "debtorName", false, "DEBTOR_NAME");
		public final static Property FromAmount = new Property(12, Float.class,
				"fromAmount", false, "FROM_AMOUNT");
		public final static Property FromCurrency = new Property(13,
				String.class, "fromCurrency", false, "FROM_CURRENCY");
		public final static Property PaymentDetails = new Property(14,
				String.class, "paymentDetails", false, "PAYMENT_DETAILS");
		public final static Property RateReference = new Property(15,
				String.class, "rateReference", false, "RATE_REFERENCE");
		public final static Property Status = new Property(16, String.class,
				"status", false, "STATUS");
		public final static Property ToAmount = new Property(17, Float.class,
				"toAmount", false, "TO_AMOUNT");
		public final static Property ToCurrency = new Property(18,
				String.class, "toCurrency", false, "TO_CURRENCY");
		public final static Property ValueDate = new Property(19, String.class,
				"valueDate", false, "VALUE_DATE");
		public final static Property Scope = new Property(20, String.class,
				"scope", false, "SCOPE");
		public final static Property ObjectId = new Property(21, String.class,
				"objectId", false, "OBJECT_ID");
		public final static Property _cacheUpdatedAt = new Property(22,
				java.util.Date.class, "_cacheUpdatedAt", false,
				"_CACHE_UPDATED_AT");
		public final static Property ApCachedRequestId = new Property(23,
				Long.class, "apCachedRequestId", false, "AP_CACHED_REQUEST_ID");
	};

	private DaoSession daoSession;

	public CorporatePaymentsCrossBorderFxPaymentDao(DaoConfig config) {
		super(config);
	}

	public CorporatePaymentsCrossBorderFxPaymentDao(DaoConfig config,
			DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint
				+ "'CORPORATEPAYMENTSCROSSBORDERFXPAYMENTS' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'BENEFICIARY_ACCOUNT' TEXT," + // 1: beneficiaryAccount
				"'BENEFICIARY_ADDRESS' TEXT," + // 2: beneficiaryAddress
				"'BENEFICIARY_BANK' TEXT," + // 3: beneficiaryBank
				"'BENEFICIARY_NAME' TEXT," + // 4: beneficiaryName
				"'CITI_REF' TEXT," + // 5: citiRef
				"'CREATED_BY' TEXT," + // 6: createdBy
				"'CREATED_ON' TEXT," + // 7: createdOn
				"'CUSTOMER_TXN_REF' TEXT," + // 8: customerTxnRef
				"'DEBTOR_ACCOUNT' TEXT," + // 9: debtorAccount
				"'DEBTOR_ADDRESS' TEXT," + // 10: debtorAddress
				"'DEBTOR_NAME' TEXT," + // 11: debtorName
				"'FROM_AMOUNT' REAL," + // 12: fromAmount
				"'FROM_CURRENCY' TEXT," + // 13: fromCurrency
				"'PAYMENT_DETAILS' TEXT," + // 14: paymentDetails
				"'RATE_REFERENCE' TEXT," + // 15: rateReference
				"'STATUS' TEXT," + // 16: status
				"'TO_AMOUNT' REAL," + // 17: toAmount
				"'TO_CURRENCY' TEXT," + // 18: toCurrency
				"'VALUE_DATE' TEXT," + // 19: valueDate
				"'SCOPE' TEXT," + // 20: scope
				"'OBJECT_ID' TEXT," + // 21: objectId
				"'_CACHE_UPDATED_AT' INTEGER," + // 22: _cacheUpdatedAt
				"'AP_CACHED_REQUEST_ID' INTEGER);"); // 23: apCachedRequestId
		// Add Indexes
		db.execSQL("CREATE UNIQUE INDEX "
				+ constraint
				+ "IDX_CORPORATEPAYMENTSCROSSBORDERFXPAYMENTS_OBJECT_ID ON CORPORATEPAYMENTSCROSSBORDERFXPAYMENTS"
				+ " (OBJECT_ID);");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'CORPORATEPAYMENTSCROSSBORDERFXPAYMENTS'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt,
			CorporatePaymentsCrossBorderFxPayment entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String beneficiaryAccount = entity.getBeneficiaryAccount();
		if (beneficiaryAccount != null) {
			stmt.bindString(2, beneficiaryAccount);
		}

		String beneficiaryAddress = entity.getBeneficiaryAddress();
		if (beneficiaryAddress != null) {
			stmt.bindString(3, beneficiaryAddress);
		}

		String beneficiaryBank = entity.getBeneficiaryBank();
		if (beneficiaryBank != null) {
			stmt.bindString(4, beneficiaryBank);
		}

		String beneficiaryName = entity.getBeneficiaryName();
		if (beneficiaryName != null) {
			stmt.bindString(5, beneficiaryName);
		}

		String citiRef = entity.getCitiRef();
		if (citiRef != null) {
			stmt.bindString(6, citiRef);
		}

		String createdBy = entity.getCreatedBy();
		if (createdBy != null) {
			stmt.bindString(7, createdBy);
		}

		String createdOn = entity.getCreatedOn();
		if (createdOn != null) {
			stmt.bindString(8, createdOn);
		}

		String customerTxnRef = entity.getCustomerTxnRef();
		if (customerTxnRef != null) {
			stmt.bindString(9, customerTxnRef);
		}

		String debtorAccount = entity.getDebtorAccount();
		if (debtorAccount != null) {
			stmt.bindString(10, debtorAccount);
		}

		String debtorAddress = entity.getDebtorAddress();
		if (debtorAddress != null) {
			stmt.bindString(11, debtorAddress);
		}

		String debtorName = entity.getDebtorName();
		if (debtorName != null) {
			stmt.bindString(12, debtorName);
		}

		Float fromAmount = entity.getFromAmount();
		if (fromAmount != null) {
			stmt.bindDouble(13, fromAmount);
		}

		String fromCurrency = entity.getFromCurrency();
		if (fromCurrency != null) {
			stmt.bindString(14, fromCurrency);
		}

		String paymentDetails = entity.getPaymentDetails();
		if (paymentDetails != null) {
			stmt.bindString(15, paymentDetails);
		}

		String rateReference = entity.getRateReference();
		if (rateReference != null) {
			stmt.bindString(16, rateReference);
		}

		String status = entity.getStatus();
		if (status != null) {
			stmt.bindString(17, status);
		}

		Float toAmount = entity.getToAmount();
		if (toAmount != null) {
			stmt.bindDouble(18, toAmount);
		}

		String toCurrency = entity.getToCurrency();
		if (toCurrency != null) {
			stmt.bindString(19, toCurrency);
		}

		String valueDate = entity.getValueDate();
		if (valueDate != null) {
			stmt.bindString(20, valueDate);
		}

		String scope = entity.getScope();
		if (scope != null) {
			stmt.bindString(21, scope);
		}

		String objectId = entity.getObjectId();
		if (objectId != null) {
			stmt.bindString(22, objectId);
		}

		java.util.Date _cacheUpdatedAt = entity.get_cacheUpdatedAt();
		if (_cacheUpdatedAt != null) {
			stmt.bindLong(23, _cacheUpdatedAt.getTime());
		}

		Long apCachedRequestId = entity.getApCachedRequestId();
		if (apCachedRequestId != null) {
			stmt.bindLong(24, apCachedRequestId);
		}
	}

	@Override
	protected void attachEntity(CorporatePaymentsCrossBorderFxPayment entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public CorporatePaymentsCrossBorderFxPayment readEntity(Cursor cursor,
			int offset) {
		CorporatePaymentsCrossBorderFxPayment entity = new CorporatePaymentsCrossBorderFxPayment(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // beneficiaryAccount
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // beneficiaryAddress
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // beneficiaryBank
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // beneficiaryName
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // citiRef
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createdBy
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createdOn
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // customerTxnRef
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // debtorAccount
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // debtorAddress
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // debtorName
				cursor.isNull(offset + 12) ? null : cursor
						.getFloat(offset + 12), // fromAmount
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13), // fromCurrency
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14), // paymentDetails
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15), // rateReference
				cursor.isNull(offset + 16) ? null : cursor
						.getString(offset + 16), // status
				cursor.isNull(offset + 17) ? null : cursor
						.getFloat(offset + 17), // toAmount
				cursor.isNull(offset + 18) ? null : cursor
						.getString(offset + 18), // toCurrency
				cursor.isNull(offset + 19) ? null : cursor
						.getString(offset + 19), // valueDate
				cursor.isNull(offset + 20) ? null : cursor
						.getString(offset + 20), // scope
				cursor.isNull(offset + 21) ? null : cursor
						.getString(offset + 21), // objectId
				cursor.isNull(offset + 22) ? null : new java.util.Date(cursor
						.getLong(offset + 22)), // _cacheUpdatedAt
				cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23) // apCachedRequestId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor,
			CorporatePaymentsCrossBorderFxPayment entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setBeneficiaryAccount(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setBeneficiaryAddress(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setBeneficiaryBank(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setBeneficiaryName(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setCitiRef(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setCreatedBy(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setCreatedOn(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setCustomerTxnRef(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setDebtorAccount(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setDebtorAddress(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setDebtorName(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
		entity.setFromAmount(cursor.isNull(offset + 12) ? null : cursor
				.getFloat(offset + 12));
		entity.setFromCurrency(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.setPaymentDetails(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
		entity.setRateReference(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.setStatus(cursor.isNull(offset + 16) ? null : cursor
				.getString(offset + 16));
		entity.setToAmount(cursor.isNull(offset + 17) ? null : cursor
				.getFloat(offset + 17));
		entity.setToCurrency(cursor.isNull(offset + 18) ? null : cursor
				.getString(offset + 18));
		entity.setValueDate(cursor.isNull(offset + 19) ? null : cursor
				.getString(offset + 19));
		entity.setScope(cursor.isNull(offset + 20) ? null : cursor
				.getString(offset + 20));
		entity.setObjectId(cursor.isNull(offset + 21) ? null : cursor
				.getString(offset + 21));
		entity.set_cacheUpdatedAt(cursor.isNull(offset + 22)
				? null
				: new java.util.Date(cursor.getLong(offset + 22)));
		entity.setApCachedRequestId(cursor.isNull(offset + 23) ? null : cursor
				.getLong(offset + 23));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(
			CorporatePaymentsCrossBorderFxPayment entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(CorporatePaymentsCrossBorderFxPayment entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession
					.getAPCachedRequestDao().getAllColumns());
			builder.append(" FROM CORPORATEPAYMENTSCROSSBORDERFXPAYMENTS T");
			builder.append(" LEFT JOIN APCACHED_REQUEST T0 ON T.'AP_CACHED_REQUEST_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected CorporatePaymentsCrossBorderFxPayment loadCurrentDeep(
			Cursor cursor, boolean lock) {
		CorporatePaymentsCrossBorderFxPayment entity = loadCurrent(cursor, 0,
				lock);
		int offset = getAllColumns().length;

		APCachedRequest aPCachedRequest = loadCurrentOther(
				daoSession.getAPCachedRequestDao(), cursor, offset);
		entity.setAPCachedRequest(aPCachedRequest);

		return entity;
	}

	public CorporatePaymentsCrossBorderFxPayment loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[]{key.toString()};
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
	public List<CorporatePaymentsCrossBorderFxPayment> loadAllDeepFromCursor(
			Cursor cursor) {
		int count = cursor.getCount();
		List<CorporatePaymentsCrossBorderFxPayment> list = new ArrayList<CorporatePaymentsCrossBorderFxPayment>(
				count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<CorporatePaymentsCrossBorderFxPayment> loadDeepAllAndCloseCursor(
			Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<CorporatePaymentsCrossBorderFxPayment> queryDeep(String where,
			String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
