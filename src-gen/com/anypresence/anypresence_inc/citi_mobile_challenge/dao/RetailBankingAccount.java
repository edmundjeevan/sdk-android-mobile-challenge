package com.anypresence.anypresence_inc.citi_mobile_challenge.dao;

import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table RETAILBANKINGACCOUNTS.
 */
public class RetailBankingAccount extends APObject {

	private Long id;
	private String accountStatus;
	private String balances;
	private Integer categoryCode;
	private String copsIndicator;
	private String detailsExist;
	private String displayAcctNo;
	private String isDestinationAccount;
	private String isSourceAccount;
	private String msgs;
	private String offersIndicator;
	private String productCurrency;
	private String productDescription;
	private Integer productType;
	private String txnExist;
	private String scope;
	private String objectId;
	private java.util.Date _cacheUpdatedAt;
	private Long apCachedRequestId;

	/** Used to resolve relations */
	private transient DaoSession daoSession;

	/** Used for active entity operations. */
	private transient RetailBankingAccountDao myDao;

	private APCachedRequest aPCachedRequest;
	private Long aPCachedRequest__resolvedKey;

	// KEEP FIELDS - put your custom fields here
	// KEEP FIELDS END

	public RetailBankingAccount() {
	}

	public RetailBankingAccount(Long id) {
		this.id = id;
	}

	public RetailBankingAccount(Long id, String accountStatus, String balances,
			Integer categoryCode, String copsIndicator, String detailsExist,
			String displayAcctNo, String isDestinationAccount,
			String isSourceAccount, String msgs, String offersIndicator,
			String productCurrency, String productDescription,
			Integer productType, String txnExist, String scope,
			String objectId, java.util.Date _cacheUpdatedAt,
			Long apCachedRequestId) {
		this.id = id;
		this.accountStatus = accountStatus;
		this.balances = balances;
		this.categoryCode = categoryCode;
		this.copsIndicator = copsIndicator;
		this.detailsExist = detailsExist;
		this.displayAcctNo = displayAcctNo;
		this.isDestinationAccount = isDestinationAccount;
		this.isSourceAccount = isSourceAccount;
		this.msgs = msgs;
		this.offersIndicator = offersIndicator;
		this.productCurrency = productCurrency;
		this.productDescription = productDescription;
		this.productType = productType;
		this.txnExist = txnExist;
		this.scope = scope;
		this.objectId = objectId;
		this._cacheUpdatedAt = _cacheUpdatedAt;
		this.apCachedRequestId = apCachedRequestId;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(DaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null
				? daoSession.getRetailBankingAccountDao()
				: null;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getAccountStatus() {
		return accountStatus;
	}

	public void setAccountStatus(String accountStatus) {
		this.accountStatus = accountStatus;
	}

	public String getBalances() {
		return balances;
	}

	public void setBalances(String balances) {
		this.balances = balances;
	}

	public Integer getCategoryCode() {
		return categoryCode;
	}

	public void setCategoryCode(Integer categoryCode) {
		this.categoryCode = categoryCode;
	}

	public String getCopsIndicator() {
		return copsIndicator;
	}

	public void setCopsIndicator(String copsIndicator) {
		this.copsIndicator = copsIndicator;
	}

	public String getDetailsExist() {
		return detailsExist;
	}

	public void setDetailsExist(String detailsExist) {
		this.detailsExist = detailsExist;
	}

	public String getDisplayAcctNo() {
		return displayAcctNo;
	}

	public void setDisplayAcctNo(String displayAcctNo) {
		this.displayAcctNo = displayAcctNo;
	}

	public String getIsDestinationAccount() {
		return isDestinationAccount;
	}

	public void setIsDestinationAccount(String isDestinationAccount) {
		this.isDestinationAccount = isDestinationAccount;
	}

	public String getIsSourceAccount() {
		return isSourceAccount;
	}

	public void setIsSourceAccount(String isSourceAccount) {
		this.isSourceAccount = isSourceAccount;
	}

	public String getMsgs() {
		return msgs;
	}

	public void setMsgs(String msgs) {
		this.msgs = msgs;
	}

	public String getOffersIndicator() {
		return offersIndicator;
	}

	public void setOffersIndicator(String offersIndicator) {
		this.offersIndicator = offersIndicator;
	}

	public String getProductCurrency() {
		return productCurrency;
	}

	public void setProductCurrency(String productCurrency) {
		this.productCurrency = productCurrency;
	}

	public String getProductDescription() {
		return productDescription;
	}

	public void setProductDescription(String productDescription) {
		this.productDescription = productDescription;
	}

	public Integer getProductType() {
		return productType;
	}

	public void setProductType(Integer productType) {
		this.productType = productType;
	}

	public String getTxnExist() {
		return txnExist;
	}

	public void setTxnExist(String txnExist) {
		this.txnExist = txnExist;
	}

	public String getScope() {
		return scope;
	}

	public void setScope(String scope) {
		this.scope = scope;
	}

	public String getObjectId() {
		return objectId;
	}

	public void setObjectId(String objectId) {
		this.objectId = objectId;
	}

	public java.util.Date get_cacheUpdatedAt() {
		return _cacheUpdatedAt;
	}

	public void set_cacheUpdatedAt(java.util.Date _cacheUpdatedAt) {
		this._cacheUpdatedAt = _cacheUpdatedAt;
	}

	public Long getApCachedRequestId() {
		return apCachedRequestId;
	}

	public void setApCachedRequestId(Long apCachedRequestId) {
		this.apCachedRequestId = apCachedRequestId;
	}

	/** To-one relationship, resolved on first access. */
	public APCachedRequest getAPCachedRequest() {
		Long __key = this.apCachedRequestId;
		if (aPCachedRequest__resolvedKey == null
				|| !aPCachedRequest__resolvedKey.equals(__key)) {
			if (daoSession == null) {
				throw new DaoException("Entity is detached from DAO context");
			}
			APCachedRequestDao targetDao = daoSession.getAPCachedRequestDao();
			APCachedRequest aPCachedRequestNew = targetDao.load(__key);
			synchronized (this) {
				aPCachedRequest = aPCachedRequestNew;
				aPCachedRequest__resolvedKey = __key;
			}
		}
		return aPCachedRequest;
	}

	public void setAPCachedRequest(APCachedRequest aPCachedRequest) {
		synchronized (this) {
			this.aPCachedRequest = aPCachedRequest;
			apCachedRequestId = aPCachedRequest == null
					? null
					: aPCachedRequest.getId();
			aPCachedRequest__resolvedKey = apCachedRequestId;
		}
	}

	/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
	public void delete() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.delete(this);
	}

	/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
	public void update() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.update(this);
	}

	/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
	public void refresh() {
		if (myDao == null) {
			throw new DaoException("Entity is detached from DAO context");
		}
		myDao.refresh(this);
	}

	// KEEP METHODS - put your custom methods here
	// KEEP METHODS END

}
