package com.anypresence.anypresence_inc.citi_mobile_challenge.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.APCachedRequestDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.APObjectsAPCachedRequestsDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CapitalMarketsActivityDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CapitalMarketsContactDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CapitalMarketsContentServiceDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CapitalMarketsLoginDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CapitalMarketsOrderDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CapitalMarketsRevenueDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsAccountDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsBeneficiaryDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsCrossBorderFxBookingDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsCrossBorderFxPaymentDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsCrossBorderFxQuoteDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsLoginDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsPaymentDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingAccountDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingAccountBalanceDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingAccountFundTransferDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingAccountTransactionDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingForeignCurrencyDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingLocationDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingLoginDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingPayeeDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingPayeeTypeDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingRewardsCatalogDao;
import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingRewardsRedemptionDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 10): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
	public static final int SCHEMA_VERSION = 10;

	/** Creates underlying database table using DAOs. */
	public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
		APCachedRequestDao.createTable(db, ifNotExists);
		APObjectsAPCachedRequestsDao.createTable(db, ifNotExists);
		CapitalMarketsActivityDao.createTable(db, ifNotExists);
		CapitalMarketsContactDao.createTable(db, ifNotExists);
		CapitalMarketsContentServiceDao.createTable(db, ifNotExists);
		CapitalMarketsLoginDao.createTable(db, ifNotExists);
		CapitalMarketsOrderDao.createTable(db, ifNotExists);
		CapitalMarketsRevenueDao.createTable(db, ifNotExists);
		CorporatePaymentsAccountDao.createTable(db, ifNotExists);
		CorporatePaymentsBeneficiaryDao.createTable(db, ifNotExists);
		CorporatePaymentsCrossBorderFxBookingDao.createTable(db, ifNotExists);
		CorporatePaymentsCrossBorderFxPaymentDao.createTable(db, ifNotExists);
		CorporatePaymentsCrossBorderFxQuoteDao.createTable(db, ifNotExists);
		CorporatePaymentsLoginDao.createTable(db, ifNotExists);
		CorporatePaymentsPaymentDao.createTable(db, ifNotExists);
		RetailBankingAccountDao.createTable(db, ifNotExists);
		RetailBankingAccountBalanceDao.createTable(db, ifNotExists);
		RetailBankingAccountFundTransferDao.createTable(db, ifNotExists);
		RetailBankingAccountTransactionDao.createTable(db, ifNotExists);
		RetailBankingForeignCurrencyDao.createTable(db, ifNotExists);
		RetailBankingLocationDao.createTable(db, ifNotExists);
		RetailBankingLoginDao.createTable(db, ifNotExists);
		RetailBankingPayeeDao.createTable(db, ifNotExists);
		RetailBankingPayeeTypeDao.createTable(db, ifNotExists);
		RetailBankingRewardsCatalogDao.createTable(db, ifNotExists);
		RetailBankingRewardsRedemptionDao.createTable(db, ifNotExists);
	}

	/** Drops underlying database table using DAOs. */
	public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
		APCachedRequestDao.dropTable(db, ifExists);
		APObjectsAPCachedRequestsDao.dropTable(db, ifExists);
		CapitalMarketsActivityDao.dropTable(db, ifExists);
		CapitalMarketsContactDao.dropTable(db, ifExists);
		CapitalMarketsContentServiceDao.dropTable(db, ifExists);
		CapitalMarketsLoginDao.dropTable(db, ifExists);
		CapitalMarketsOrderDao.dropTable(db, ifExists);
		CapitalMarketsRevenueDao.dropTable(db, ifExists);
		CorporatePaymentsAccountDao.dropTable(db, ifExists);
		CorporatePaymentsBeneficiaryDao.dropTable(db, ifExists);
		CorporatePaymentsCrossBorderFxBookingDao.dropTable(db, ifExists);
		CorporatePaymentsCrossBorderFxPaymentDao.dropTable(db, ifExists);
		CorporatePaymentsCrossBorderFxQuoteDao.dropTable(db, ifExists);
		CorporatePaymentsLoginDao.dropTable(db, ifExists);
		CorporatePaymentsPaymentDao.dropTable(db, ifExists);
		RetailBankingAccountDao.dropTable(db, ifExists);
		RetailBankingAccountBalanceDao.dropTable(db, ifExists);
		RetailBankingAccountFundTransferDao.dropTable(db, ifExists);
		RetailBankingAccountTransactionDao.dropTable(db, ifExists);
		RetailBankingForeignCurrencyDao.dropTable(db, ifExists);
		RetailBankingLocationDao.dropTable(db, ifExists);
		RetailBankingLoginDao.dropTable(db, ifExists);
		RetailBankingPayeeDao.dropTable(db, ifExists);
		RetailBankingPayeeTypeDao.dropTable(db, ifExists);
		RetailBankingRewardsCatalogDao.dropTable(db, ifExists);
		RetailBankingRewardsRedemptionDao.dropTable(db, ifExists);
	}

	public static abstract class OpenHelper extends SQLiteOpenHelper {

		public OpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory, SCHEMA_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			Log.i("greenDAO", "Creating tables for schema version "
					+ SCHEMA_VERSION);
			createAllTables(db, false);
		}
	}

	/** WARNING: Drops all table on Upgrade! Use only during development. */
	public static class DevOpenHelper extends OpenHelper {
		public DevOpenHelper(Context context, String name, CursorFactory factory) {
			super(context, name, factory);
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			Log.i("greenDAO", "Upgrading schema from version " + oldVersion
					+ " to " + newVersion + " by dropping all tables");
			dropAllTables(db, true);
			onCreate(db);
		}
	}

	public DaoMaster(SQLiteDatabase db) {
		super(db, SCHEMA_VERSION);
		registerDaoClass(APCachedRequestDao.class);
		registerDaoClass(APObjectsAPCachedRequestsDao.class);
		registerDaoClass(CapitalMarketsActivityDao.class);
		registerDaoClass(CapitalMarketsContactDao.class);
		registerDaoClass(CapitalMarketsContentServiceDao.class);
		registerDaoClass(CapitalMarketsLoginDao.class);
		registerDaoClass(CapitalMarketsOrderDao.class);
		registerDaoClass(CapitalMarketsRevenueDao.class);
		registerDaoClass(CorporatePaymentsAccountDao.class);
		registerDaoClass(CorporatePaymentsBeneficiaryDao.class);
		registerDaoClass(CorporatePaymentsCrossBorderFxBookingDao.class);
		registerDaoClass(CorporatePaymentsCrossBorderFxPaymentDao.class);
		registerDaoClass(CorporatePaymentsCrossBorderFxQuoteDao.class);
		registerDaoClass(CorporatePaymentsLoginDao.class);
		registerDaoClass(CorporatePaymentsPaymentDao.class);
		registerDaoClass(RetailBankingAccountDao.class);
		registerDaoClass(RetailBankingAccountBalanceDao.class);
		registerDaoClass(RetailBankingAccountFundTransferDao.class);
		registerDaoClass(RetailBankingAccountTransactionDao.class);
		registerDaoClass(RetailBankingForeignCurrencyDao.class);
		registerDaoClass(RetailBankingLocationDao.class);
		registerDaoClass(RetailBankingLoginDao.class);
		registerDaoClass(RetailBankingPayeeDao.class);
		registerDaoClass(RetailBankingPayeeTypeDao.class);
		registerDaoClass(RetailBankingRewardsCatalogDao.class);
		registerDaoClass(RetailBankingRewardsRedemptionDao.class);
	}

	public DaoSession newSession() {
		return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
	}

	public DaoSession newSession(IdentityScopeType type) {
		return new DaoSession(db, type, daoConfigMap);
	}

}
