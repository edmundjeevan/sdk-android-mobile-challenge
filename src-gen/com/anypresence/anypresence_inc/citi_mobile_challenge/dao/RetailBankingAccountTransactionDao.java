package com.anypresence.anypresence_inc.citi_mobile_challenge.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingAccountTransaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RETAILBANKINGACCOUNTTRANSACTIONS.
 */
public class RetailBankingAccountTransactionDao
		extends
			AbstractDao<RetailBankingAccountTransaction, Long> {

	public static final String TABLENAME = "RETAILBANKINGACCOUNTTRANSACTIONS";

	/**
	 * Properties of entity RetailBankingAccountTransaction.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property AccountId = new Property(1, String.class,
				"accountId", false, "ACCOUNT_ID");
		public final static Property Activity = new Property(2, String.class,
				"activity", false, "ACTIVITY");
		public final static Property CheckImageEligible = new Property(3,
				String.class, "checkImageEligible", false,
				"CHECK_IMAGE_ELIGIBLE");
		public final static Property DatePosted = new Property(4, String.class,
				"datePosted", false, "DATE_POSTED");
		public final static Property FormattedAmount = new Property(5,
				String.class, "formattedAmount", false, "FORMATTED_AMOUNT");
		public final static Property PendingDate = new Property(6,
				String.class, "pendingDate", false, "PENDING_DATE");
		public final static Property TransactionAmount = new Property(7,
				Float.class, "transactionAmount", false, "TRANSACTION_AMOUNT");
		public final static Property TransactionDescription = new Property(8,
				String.class, "transactionDescription", false,
				"TRANSACTION_DESCRIPTION");
		public final static Property TransactionIdentifier = new Property(9,
				String.class, "transactionIdentifier", false,
				"TRANSACTION_IDENTIFIER");
		public final static Property TransactionIndex = new Property(10,
				String.class, "transactionIndex", false, "TRANSACTION_INDEX");
		public final static Property TransactionType = new Property(11,
				String.class, "transactionType", false, "TRANSACTION_TYPE");
		public final static Property Scope = new Property(12, String.class,
				"scope", false, "SCOPE");
		public final static Property ObjectId = new Property(13, String.class,
				"objectId", false, "OBJECT_ID");
		public final static Property _cacheUpdatedAt = new Property(14,
				java.util.Date.class, "_cacheUpdatedAt", false,
				"_CACHE_UPDATED_AT");
		public final static Property ApCachedRequestId = new Property(15,
				Long.class, "apCachedRequestId", false, "AP_CACHED_REQUEST_ID");
	};

	private DaoSession daoSession;

	public RetailBankingAccountTransactionDao(DaoConfig config) {
		super(config);
	}

	public RetailBankingAccountTransactionDao(DaoConfig config,
			DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint
				+ "'RETAILBANKINGACCOUNTTRANSACTIONS' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'ACCOUNT_ID' TEXT," + // 1: accountId
				"'ACTIVITY' TEXT," + // 2: activity
				"'CHECK_IMAGE_ELIGIBLE' TEXT," + // 3: checkImageEligible
				"'DATE_POSTED' TEXT," + // 4: datePosted
				"'FORMATTED_AMOUNT' TEXT," + // 5: formattedAmount
				"'PENDING_DATE' TEXT," + // 6: pendingDate
				"'TRANSACTION_AMOUNT' REAL," + // 7: transactionAmount
				"'TRANSACTION_DESCRIPTION' TEXT," + // 8: transactionDescription
				"'TRANSACTION_IDENTIFIER' TEXT," + // 9: transactionIdentifier
				"'TRANSACTION_INDEX' TEXT," + // 10: transactionIndex
				"'TRANSACTION_TYPE' TEXT," + // 11: transactionType
				"'SCOPE' TEXT," + // 12: scope
				"'OBJECT_ID' TEXT," + // 13: objectId
				"'_CACHE_UPDATED_AT' INTEGER," + // 14: _cacheUpdatedAt
				"'AP_CACHED_REQUEST_ID' INTEGER);"); // 15: apCachedRequestId
		// Add Indexes
		db.execSQL("CREATE UNIQUE INDEX "
				+ constraint
				+ "IDX_RETAILBANKINGACCOUNTTRANSACTIONS_OBJECT_ID ON RETAILBANKINGACCOUNTTRANSACTIONS"
				+ " (OBJECT_ID);");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'RETAILBANKINGACCOUNTTRANSACTIONS'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt,
			RetailBankingAccountTransaction entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String accountId = entity.getAccountId();
		if (accountId != null) {
			stmt.bindString(2, accountId);
		}

		String activity = entity.getActivity();
		if (activity != null) {
			stmt.bindString(3, activity);
		}

		String checkImageEligible = entity.getCheckImageEligible();
		if (checkImageEligible != null) {
			stmt.bindString(4, checkImageEligible);
		}

		String datePosted = entity.getDatePosted();
		if (datePosted != null) {
			stmt.bindString(5, datePosted);
		}

		String formattedAmount = entity.getFormattedAmount();
		if (formattedAmount != null) {
			stmt.bindString(6, formattedAmount);
		}

		String pendingDate = entity.getPendingDate();
		if (pendingDate != null) {
			stmt.bindString(7, pendingDate);
		}

		Float transactionAmount = entity.getTransactionAmount();
		if (transactionAmount != null) {
			stmt.bindDouble(8, transactionAmount);
		}

		String transactionDescription = entity.getTransactionDescription();
		if (transactionDescription != null) {
			stmt.bindString(9, transactionDescription);
		}

		String transactionIdentifier = entity.getTransactionIdentifier();
		if (transactionIdentifier != null) {
			stmt.bindString(10, transactionIdentifier);
		}

		String transactionIndex = entity.getTransactionIndex();
		if (transactionIndex != null) {
			stmt.bindString(11, transactionIndex);
		}

		String transactionType = entity.getTransactionType();
		if (transactionType != null) {
			stmt.bindString(12, transactionType);
		}

		String scope = entity.getScope();
		if (scope != null) {
			stmt.bindString(13, scope);
		}

		String objectId = entity.getObjectId();
		if (objectId != null) {
			stmt.bindString(14, objectId);
		}

		java.util.Date _cacheUpdatedAt = entity.get_cacheUpdatedAt();
		if (_cacheUpdatedAt != null) {
			stmt.bindLong(15, _cacheUpdatedAt.getTime());
		}

		Long apCachedRequestId = entity.getApCachedRequestId();
		if (apCachedRequestId != null) {
			stmt.bindLong(16, apCachedRequestId);
		}
	}

	@Override
	protected void attachEntity(RetailBankingAccountTransaction entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public RetailBankingAccountTransaction readEntity(Cursor cursor, int offset) {
		RetailBankingAccountTransaction entity = new RetailBankingAccountTransaction(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountId
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // activity
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // checkImageEligible
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // datePosted
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // formattedAmount
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pendingDate
				cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // transactionAmount
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // transactionDescription
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // transactionIdentifier
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // transactionIndex
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // transactionType
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // scope
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13), // objectId
				cursor.isNull(offset + 14) ? null : new java.util.Date(cursor
						.getLong(offset + 14)), // _cacheUpdatedAt
				cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15) // apCachedRequestId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor,
			RetailBankingAccountTransaction entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setAccountId(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setActivity(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setCheckImageEligible(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setDatePosted(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setFormattedAmount(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setPendingDate(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setTransactionAmount(cursor.isNull(offset + 7) ? null : cursor
				.getFloat(offset + 7));
		entity.setTransactionDescription(cursor.isNull(offset + 8)
				? null
				: cursor.getString(offset + 8));
		entity.setTransactionIdentifier(cursor.isNull(offset + 9)
				? null
				: cursor.getString(offset + 9));
		entity.setTransactionIndex(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setTransactionType(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
		entity.setScope(cursor.isNull(offset + 12) ? null : cursor
				.getString(offset + 12));
		entity.setObjectId(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.set_cacheUpdatedAt(cursor.isNull(offset + 14)
				? null
				: new java.util.Date(cursor.getLong(offset + 14)));
		entity.setApCachedRequestId(cursor.isNull(offset + 15) ? null : cursor
				.getLong(offset + 15));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(RetailBankingAccountTransaction entity,
			long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(RetailBankingAccountTransaction entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession
					.getAPCachedRequestDao().getAllColumns());
			builder.append(" FROM RETAILBANKINGACCOUNTTRANSACTIONS T");
			builder.append(" LEFT JOIN APCACHED_REQUEST T0 ON T.'AP_CACHED_REQUEST_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected RetailBankingAccountTransaction loadCurrentDeep(Cursor cursor,
			boolean lock) {
		RetailBankingAccountTransaction entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		APCachedRequest aPCachedRequest = loadCurrentOther(
				daoSession.getAPCachedRequestDao(), cursor, offset);
		entity.setAPCachedRequest(aPCachedRequest);

		return entity;
	}

	public RetailBankingAccountTransaction loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[]{key.toString()};
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
	public List<RetailBankingAccountTransaction> loadAllDeepFromCursor(
			Cursor cursor) {
		int count = cursor.getCount();
		List<RetailBankingAccountTransaction> list = new ArrayList<RetailBankingAccountTransaction>(
				count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<RetailBankingAccountTransaction> loadDeepAllAndCloseCursor(
			Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<RetailBankingAccountTransaction> queryDeep(String where,
			String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
