package com.anypresence.anypresence_inc.citi_mobile_challenge.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CapitalMarketsContentService;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CAPITALMARKETSCONTENTSERVICES.
 */
public class CapitalMarketsContentServiceDao
		extends
			AbstractDao<CapitalMarketsContentService, Long> {

	public static final String TABLENAME = "CAPITALMARKETSCONTENTSERVICES";

	/**
	 * Properties of entity CapitalMarketsContentService.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property AlertDate = new Property(1, String.class,
				"alertDate", false, "ALERT_DATE");
		public final static Property AllAttachments = new Property(2,
				String.class, "allAttachments", false, "ALL_ATTACHMENTS");
		public final static Property AnalystId = new Property(3, String.class,
				"analystId", false, "ANALYST_ID");
		public final static Property AnalystType = new Property(4,
				String.class, "analystType", false, "ANALYST_TYPE");
		public final static Property AssetClass = new Property(5, String.class,
				"assetClass", false, "ASSET_CLASS");
		public final static Property AttachmentId = new Property(6,
				Integer.class, "attachmentId", false, "ATTACHMENT_ID");
		public final static Property AuthorDetails = new Property(7,
				String.class, "authorDetails", false, "AUTHOR_DETAILS");
		public final static Property AuthorId = new Property(8, String.class,
				"authorId", false, "AUTHOR_ID");
		public final static Property AuthorName = new Property(9, String.class,
				"authorName", false, "AUTHOR_NAME");
		public final static Property Authors = new Property(10, String.class,
				"authors", false, "AUTHORS");
		public final static Property Company = new Property(11, String.class,
				"company", false, "COMPANY");
		public final static Property ContentServicesType = new Property(12,
				String.class, "contentServicesType", false,
				"CONTENT_SERVICES_TYPE");
		public final static Property ContentType = new Property(13,
				String.class, "contentType", false, "CONTENT_TYPE");
		public final static Property ContentUrl = new Property(14,
				String.class, "contentUrl", false, "CONTENT_URL");
		public final static Property DateString = new Property(15,
				String.class, "dateString", false, "DATE_STRING");
		public final static Property DocumentUrl = new Property(16,
				String.class, "documentUrl", false, "DOCUMENT_URL");
		public final static Property EncryptedId = new Property(17,
				String.class, "encryptedId", false, "ENCRYPTED_ID");
		public final static Property FileLink = new Property(18, String.class,
				"fileLink", false, "FILE_LINK");
		public final static Property FileName = new Property(19, String.class,
				"fileName", false, "FILE_NAME");
		public final static Property FileType = new Property(20, String.class,
				"fileType", false, "FILE_TYPE");
		public final static Property FormatedPubDate = new Property(21,
				String.class, "formatedPubDate", false, "FORMATED_PUB_DATE");
		public final static Property FormattedDateStr = new Property(22,
				String.class, "formattedDateStr", false, "FORMATTED_DATE_STR");
		public final static Property Headline = new Property(23, String.class,
				"headline", false, "HEADLINE");
		public final static Property HitCount = new Property(24, Integer.class,
				"hitCount", false, "HIT_COUNT");
		public final static Property HtmlEscapedTitle = new Property(25,
				String.class, "htmlEscapedTitle", false, "HTML_ESCAPED_TITLE");
		public final static Property Image = new Property(26, String.class,
				"image", false, "IMAGE");
		public final static Property ImageGroup = new Property(27,
				String.class, "imageGroup", false, "IMAGE_GROUP");
		public final static Property Kv = new Property(28, String.class, "kv",
				false, "KV");
		public final static Property MedialUrlIos = new Property(29,
				String.class, "medialUrlIos", false, "MEDIAL_URL_IOS");
		public final static Property MediaUrlAndroid = new Property(30,
				String.class, "mediaUrlAndroid", false, "MEDIA_URL_ANDROID");
		public final static Property MenuCode = new Property(31, String.class,
				"menuCode", false, "MENU_CODE");
		public final static Property Miliseconds = new Property(32,
				String.class, "miliseconds", false, "MILISECONDS");
		public final static Property OboFirstName = new Property(33,
				String.class, "oboFirstName", false, "OBO_FIRST_NAME");
		public final static Property OboLastName = new Property(34,
				String.class, "oboLastName", false, "OBO_LAST_NAME");
		public final static Property OboPreferredName = new Property(35,
				String.class, "oboPreferredName", false, "OBO_PREFERRED_NAME");
		public final static Property PageCount = new Property(36,
				Integer.class, "pageCount", false, "PAGE_COUNT");
		public final static Property ProductList = new Property(37,
				String.class, "productList", false, "PRODUCT_LIST");
		public final static Property ProductType = new Property(38,
				String.class, "productType", false, "PRODUCT_TYPE");
		public final static Property PubDate = new Property(39, String.class,
				"pubDate", false, "PUB_DATE");
		public final static Property PubId = new Property(40, String.class,
				"pubId", false, "PUB_ID");
		public final static Property PubKey = new Property(41, String.class,
				"pubKey", false, "PUB_KEY");
		public final static Property RefArticleTitle = new Property(42,
				String.class, "refArticleTitle", false, "REF_ARTICLE_TITLE");
		public final static Property RefArticleUrl = new Property(43,
				String.class, "refArticleUrl", false, "REF_ARTICLE_URL");
		public final static Property Region = new Property(44, String.class,
				"region", false, "REGION");
		public final static Property ResdataUrl = new Property(45,
				String.class, "resdataUrl", false, "RESDATA_URL");
		public final static Property Rnum = new Property(46, String.class,
				"rnum", false, "RNUM");
		public final static Property Scale = new Property(47, String.class,
				"scale", false, "SCALE");
		public final static Property Sectors = new Property(48, String.class,
				"sectors", false, "SECTORS");
		public final static Property Source = new Property(49, String.class,
				"source", false, "SOURCE");
		public final static Property Summary = new Property(50, String.class,
				"summary", false, "SUMMARY");
		public final static Property Synopsis = new Property(51, String.class,
				"synopsis", false, "SYNOPSIS");
		public final static Property Template = new Property(52, String.class,
				"template", false, "TEMPLATE");
		public final static Property ThemeId = new Property(53, String.class,
				"themeId", false, "THEME_ID");
		public final static Property Tickers = new Property(54, String.class,
				"tickers", false, "TICKERS");
		public final static Property Title = new Property(55, String.class,
				"title", false, "TITLE");
		public final static Property TotalCount = new Property(56,
				Integer.class, "totalCount", false, "TOTAL_COUNT");
		public final static Property VideoType = new Property(57, String.class,
				"videoType", false, "VIDEO_TYPE");
		public final static Property VideoUrl = new Property(58, String.class,
				"videoUrl", false, "VIDEO_URL");
		public final static Property Scope = new Property(59, String.class,
				"scope", false, "SCOPE");
		public final static Property ObjectId = new Property(60, String.class,
				"objectId", false, "OBJECT_ID");
		public final static Property _cacheUpdatedAt = new Property(61,
				java.util.Date.class, "_cacheUpdatedAt", false,
				"_CACHE_UPDATED_AT");
		public final static Property ApCachedRequestId = new Property(62,
				Long.class, "apCachedRequestId", false, "AP_CACHED_REQUEST_ID");
	};

	private DaoSession daoSession;

	public CapitalMarketsContentServiceDao(DaoConfig config) {
		super(config);
	}

	public CapitalMarketsContentServiceDao(DaoConfig config,
			DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint
				+ "'CAPITALMARKETSCONTENTSERVICES' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'ALERT_DATE' TEXT," + // 1: alertDate
				"'ALL_ATTACHMENTS' TEXT," + // 2: allAttachments
				"'ANALYST_ID' TEXT," + // 3: analystId
				"'ANALYST_TYPE' TEXT," + // 4: analystType
				"'ASSET_CLASS' TEXT," + // 5: assetClass
				"'ATTACHMENT_ID' INTEGER," + // 6: attachmentId
				"'AUTHOR_DETAILS' TEXT," + // 7: authorDetails
				"'AUTHOR_ID' TEXT," + // 8: authorId
				"'AUTHOR_NAME' TEXT," + // 9: authorName
				"'AUTHORS' TEXT," + // 10: authors
				"'COMPANY' TEXT," + // 11: company
				"'CONTENT_SERVICES_TYPE' TEXT," + // 12: contentServicesType
				"'CONTENT_TYPE' TEXT," + // 13: contentType
				"'CONTENT_URL' TEXT," + // 14: contentUrl
				"'DATE_STRING' TEXT," + // 15: dateString
				"'DOCUMENT_URL' TEXT," + // 16: documentUrl
				"'ENCRYPTED_ID' TEXT," + // 17: encryptedId
				"'FILE_LINK' TEXT," + // 18: fileLink
				"'FILE_NAME' TEXT," + // 19: fileName
				"'FILE_TYPE' TEXT," + // 20: fileType
				"'FORMATED_PUB_DATE' TEXT," + // 21: formatedPubDate
				"'FORMATTED_DATE_STR' TEXT," + // 22: formattedDateStr
				"'HEADLINE' TEXT," + // 23: headline
				"'HIT_COUNT' INTEGER," + // 24: hitCount
				"'HTML_ESCAPED_TITLE' TEXT," + // 25: htmlEscapedTitle
				"'IMAGE' TEXT," + // 26: image
				"'IMAGE_GROUP' TEXT," + // 27: imageGroup
				"'KV' TEXT," + // 28: kv
				"'MEDIAL_URL_IOS' TEXT," + // 29: medialUrlIos
				"'MEDIA_URL_ANDROID' TEXT," + // 30: mediaUrlAndroid
				"'MENU_CODE' TEXT," + // 31: menuCode
				"'MILISECONDS' TEXT," + // 32: miliseconds
				"'OBO_FIRST_NAME' TEXT," + // 33: oboFirstName
				"'OBO_LAST_NAME' TEXT," + // 34: oboLastName
				"'OBO_PREFERRED_NAME' TEXT," + // 35: oboPreferredName
				"'PAGE_COUNT' INTEGER," + // 36: pageCount
				"'PRODUCT_LIST' TEXT," + // 37: productList
				"'PRODUCT_TYPE' TEXT," + // 38: productType
				"'PUB_DATE' TEXT," + // 39: pubDate
				"'PUB_ID' TEXT," + // 40: pubId
				"'PUB_KEY' TEXT," + // 41: pubKey
				"'REF_ARTICLE_TITLE' TEXT," + // 42: refArticleTitle
				"'REF_ARTICLE_URL' TEXT," + // 43: refArticleUrl
				"'REGION' TEXT," + // 44: region
				"'RESDATA_URL' TEXT," + // 45: resdataUrl
				"'RNUM' TEXT," + // 46: rnum
				"'SCALE' TEXT," + // 47: scale
				"'SECTORS' TEXT," + // 48: sectors
				"'SOURCE' TEXT," + // 49: source
				"'SUMMARY' TEXT," + // 50: summary
				"'SYNOPSIS' TEXT," + // 51: synopsis
				"'TEMPLATE' TEXT," + // 52: template
				"'THEME_ID' TEXT," + // 53: themeId
				"'TICKERS' TEXT," + // 54: tickers
				"'TITLE' TEXT," + // 55: title
				"'TOTAL_COUNT' INTEGER," + // 56: totalCount
				"'VIDEO_TYPE' TEXT," + // 57: videoType
				"'VIDEO_URL' TEXT," + // 58: videoUrl
				"'SCOPE' TEXT," + // 59: scope
				"'OBJECT_ID' TEXT," + // 60: objectId
				"'_CACHE_UPDATED_AT' INTEGER," + // 61: _cacheUpdatedAt
				"'AP_CACHED_REQUEST_ID' INTEGER);"); // 62: apCachedRequestId
		// Add Indexes
		db.execSQL("CREATE UNIQUE INDEX "
				+ constraint
				+ "IDX_CAPITALMARKETSCONTENTSERVICES_OBJECT_ID ON CAPITALMARKETSCONTENTSERVICES"
				+ " (OBJECT_ID);");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'CAPITALMARKETSCONTENTSERVICES'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt,
			CapitalMarketsContentService entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String alertDate = entity.getAlertDate();
		if (alertDate != null) {
			stmt.bindString(2, alertDate);
		}

		String allAttachments = entity.getAllAttachments();
		if (allAttachments != null) {
			stmt.bindString(3, allAttachments);
		}

		String analystId = entity.getAnalystId();
		if (analystId != null) {
			stmt.bindString(4, analystId);
		}

		String analystType = entity.getAnalystType();
		if (analystType != null) {
			stmt.bindString(5, analystType);
		}

		String assetClass = entity.getAssetClass();
		if (assetClass != null) {
			stmt.bindString(6, assetClass);
		}

		Integer attachmentId = entity.getAttachmentId();
		if (attachmentId != null) {
			stmt.bindLong(7, attachmentId);
		}

		String authorDetails = entity.getAuthorDetails();
		if (authorDetails != null) {
			stmt.bindString(8, authorDetails);
		}

		String authorId = entity.getAuthorId();
		if (authorId != null) {
			stmt.bindString(9, authorId);
		}

		String authorName = entity.getAuthorName();
		if (authorName != null) {
			stmt.bindString(10, authorName);
		}

		String authors = entity.getAuthors();
		if (authors != null) {
			stmt.bindString(11, authors);
		}

		String company = entity.getCompany();
		if (company != null) {
			stmt.bindString(12, company);
		}

		String contentServicesType = entity.getContentServicesType();
		if (contentServicesType != null) {
			stmt.bindString(13, contentServicesType);
		}

		String contentType = entity.getContentType();
		if (contentType != null) {
			stmt.bindString(14, contentType);
		}

		String contentUrl = entity.getContentUrl();
		if (contentUrl != null) {
			stmt.bindString(15, contentUrl);
		}

		String dateString = entity.getDateString();
		if (dateString != null) {
			stmt.bindString(16, dateString);
		}

		String documentUrl = entity.getDocumentUrl();
		if (documentUrl != null) {
			stmt.bindString(17, documentUrl);
		}

		String encryptedId = entity.getEncryptedId();
		if (encryptedId != null) {
			stmt.bindString(18, encryptedId);
		}

		String fileLink = entity.getFileLink();
		if (fileLink != null) {
			stmt.bindString(19, fileLink);
		}

		String fileName = entity.getFileName();
		if (fileName != null) {
			stmt.bindString(20, fileName);
		}

		String fileType = entity.getFileType();
		if (fileType != null) {
			stmt.bindString(21, fileType);
		}

		String formatedPubDate = entity.getFormatedPubDate();
		if (formatedPubDate != null) {
			stmt.bindString(22, formatedPubDate);
		}

		String formattedDateStr = entity.getFormattedDateStr();
		if (formattedDateStr != null) {
			stmt.bindString(23, formattedDateStr);
		}

		String headline = entity.getHeadline();
		if (headline != null) {
			stmt.bindString(24, headline);
		}

		Integer hitCount = entity.getHitCount();
		if (hitCount != null) {
			stmt.bindLong(25, hitCount);
		}

		String htmlEscapedTitle = entity.getHtmlEscapedTitle();
		if (htmlEscapedTitle != null) {
			stmt.bindString(26, htmlEscapedTitle);
		}

		String image = entity.getImage();
		if (image != null) {
			stmt.bindString(27, image);
		}

		String imageGroup = entity.getImageGroup();
		if (imageGroup != null) {
			stmt.bindString(28, imageGroup);
		}

		String kv = entity.getKv();
		if (kv != null) {
			stmt.bindString(29, kv);
		}

		String medialUrlIos = entity.getMedialUrlIos();
		if (medialUrlIos != null) {
			stmt.bindString(30, medialUrlIos);
		}

		String mediaUrlAndroid = entity.getMediaUrlAndroid();
		if (mediaUrlAndroid != null) {
			stmt.bindString(31, mediaUrlAndroid);
		}

		String menuCode = entity.getMenuCode();
		if (menuCode != null) {
			stmt.bindString(32, menuCode);
		}

		String miliseconds = entity.getMiliseconds();
		if (miliseconds != null) {
			stmt.bindString(33, miliseconds);
		}

		String oboFirstName = entity.getOboFirstName();
		if (oboFirstName != null) {
			stmt.bindString(34, oboFirstName);
		}

		String oboLastName = entity.getOboLastName();
		if (oboLastName != null) {
			stmt.bindString(35, oboLastName);
		}

		String oboPreferredName = entity.getOboPreferredName();
		if (oboPreferredName != null) {
			stmt.bindString(36, oboPreferredName);
		}

		Integer pageCount = entity.getPageCount();
		if (pageCount != null) {
			stmt.bindLong(37, pageCount);
		}

		String productList = entity.getProductList();
		if (productList != null) {
			stmt.bindString(38, productList);
		}

		String productType = entity.getProductType();
		if (productType != null) {
			stmt.bindString(39, productType);
		}

		String pubDate = entity.getPubDate();
		if (pubDate != null) {
			stmt.bindString(40, pubDate);
		}

		String pubId = entity.getPubId();
		if (pubId != null) {
			stmt.bindString(41, pubId);
		}

		String pubKey = entity.getPubKey();
		if (pubKey != null) {
			stmt.bindString(42, pubKey);
		}

		String refArticleTitle = entity.getRefArticleTitle();
		if (refArticleTitle != null) {
			stmt.bindString(43, refArticleTitle);
		}

		String refArticleUrl = entity.getRefArticleUrl();
		if (refArticleUrl != null) {
			stmt.bindString(44, refArticleUrl);
		}

		String region = entity.getRegion();
		if (region != null) {
			stmt.bindString(45, region);
		}

		String resdataUrl = entity.getResdataUrl();
		if (resdataUrl != null) {
			stmt.bindString(46, resdataUrl);
		}

		String rnum = entity.getRnum();
		if (rnum != null) {
			stmt.bindString(47, rnum);
		}

		String scale = entity.getScale();
		if (scale != null) {
			stmt.bindString(48, scale);
		}

		String sectors = entity.getSectors();
		if (sectors != null) {
			stmt.bindString(49, sectors);
		}

		String source = entity.getSource();
		if (source != null) {
			stmt.bindString(50, source);
		}

		String summary = entity.getSummary();
		if (summary != null) {
			stmt.bindString(51, summary);
		}

		String synopsis = entity.getSynopsis();
		if (synopsis != null) {
			stmt.bindString(52, synopsis);
		}

		String template = entity.getTemplate();
		if (template != null) {
			stmt.bindString(53, template);
		}

		String themeId = entity.getThemeId();
		if (themeId != null) {
			stmt.bindString(54, themeId);
		}

		String tickers = entity.getTickers();
		if (tickers != null) {
			stmt.bindString(55, tickers);
		}

		String title = entity.getTitle();
		if (title != null) {
			stmt.bindString(56, title);
		}

		Integer totalCount = entity.getTotalCount();
		if (totalCount != null) {
			stmt.bindLong(57, totalCount);
		}

		String videoType = entity.getVideoType();
		if (videoType != null) {
			stmt.bindString(58, videoType);
		}

		String videoUrl = entity.getVideoUrl();
		if (videoUrl != null) {
			stmt.bindString(59, videoUrl);
		}

		String scope = entity.getScope();
		if (scope != null) {
			stmt.bindString(60, scope);
		}

		String objectId = entity.getObjectId();
		if (objectId != null) {
			stmt.bindString(61, objectId);
		}

		java.util.Date _cacheUpdatedAt = entity.get_cacheUpdatedAt();
		if (_cacheUpdatedAt != null) {
			stmt.bindLong(62, _cacheUpdatedAt.getTime());
		}

		Long apCachedRequestId = entity.getApCachedRequestId();
		if (apCachedRequestId != null) {
			stmt.bindLong(63, apCachedRequestId);
		}
	}

	@Override
	protected void attachEntity(CapitalMarketsContentService entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public CapitalMarketsContentService readEntity(Cursor cursor, int offset) {
		CapitalMarketsContentService entity = new CapitalMarketsContentService(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // alertDate
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // allAttachments
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // analystId
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // analystType
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // assetClass
				cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // attachmentId
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // authorDetails
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // authorId
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // authorName
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // authors
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // company
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // contentServicesType
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13), // contentType
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14), // contentUrl
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15), // dateString
				cursor.isNull(offset + 16) ? null : cursor
						.getString(offset + 16), // documentUrl
				cursor.isNull(offset + 17) ? null : cursor
						.getString(offset + 17), // encryptedId
				cursor.isNull(offset + 18) ? null : cursor
						.getString(offset + 18), // fileLink
				cursor.isNull(offset + 19) ? null : cursor
						.getString(offset + 19), // fileName
				cursor.isNull(offset + 20) ? null : cursor
						.getString(offset + 20), // fileType
				cursor.isNull(offset + 21) ? null : cursor
						.getString(offset + 21), // formatedPubDate
				cursor.isNull(offset + 22) ? null : cursor
						.getString(offset + 22), // formattedDateStr
				cursor.isNull(offset + 23) ? null : cursor
						.getString(offset + 23), // headline
				cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // hitCount
				cursor.isNull(offset + 25) ? null : cursor
						.getString(offset + 25), // htmlEscapedTitle
				cursor.isNull(offset + 26) ? null : cursor
						.getString(offset + 26), // image
				cursor.isNull(offset + 27) ? null : cursor
						.getString(offset + 27), // imageGroup
				cursor.isNull(offset + 28) ? null : cursor
						.getString(offset + 28), // kv
				cursor.isNull(offset + 29) ? null : cursor
						.getString(offset + 29), // medialUrlIos
				cursor.isNull(offset + 30) ? null : cursor
						.getString(offset + 30), // mediaUrlAndroid
				cursor.isNull(offset + 31) ? null : cursor
						.getString(offset + 31), // menuCode
				cursor.isNull(offset + 32) ? null : cursor
						.getString(offset + 32), // miliseconds
				cursor.isNull(offset + 33) ? null : cursor
						.getString(offset + 33), // oboFirstName
				cursor.isNull(offset + 34) ? null : cursor
						.getString(offset + 34), // oboLastName
				cursor.isNull(offset + 35) ? null : cursor
						.getString(offset + 35), // oboPreferredName
				cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // pageCount
				cursor.isNull(offset + 37) ? null : cursor
						.getString(offset + 37), // productList
				cursor.isNull(offset + 38) ? null : cursor
						.getString(offset + 38), // productType
				cursor.isNull(offset + 39) ? null : cursor
						.getString(offset + 39), // pubDate
				cursor.isNull(offset + 40) ? null : cursor
						.getString(offset + 40), // pubId
				cursor.isNull(offset + 41) ? null : cursor
						.getString(offset + 41), // pubKey
				cursor.isNull(offset + 42) ? null : cursor
						.getString(offset + 42), // refArticleTitle
				cursor.isNull(offset + 43) ? null : cursor
						.getString(offset + 43), // refArticleUrl
				cursor.isNull(offset + 44) ? null : cursor
						.getString(offset + 44), // region
				cursor.isNull(offset + 45) ? null : cursor
						.getString(offset + 45), // resdataUrl
				cursor.isNull(offset + 46) ? null : cursor
						.getString(offset + 46), // rnum
				cursor.isNull(offset + 47) ? null : cursor
						.getString(offset + 47), // scale
				cursor.isNull(offset + 48) ? null : cursor
						.getString(offset + 48), // sectors
				cursor.isNull(offset + 49) ? null : cursor
						.getString(offset + 49), // source
				cursor.isNull(offset + 50) ? null : cursor
						.getString(offset + 50), // summary
				cursor.isNull(offset + 51) ? null : cursor
						.getString(offset + 51), // synopsis
				cursor.isNull(offset + 52) ? null : cursor
						.getString(offset + 52), // template
				cursor.isNull(offset + 53) ? null : cursor
						.getString(offset + 53), // themeId
				cursor.isNull(offset + 54) ? null : cursor
						.getString(offset + 54), // tickers
				cursor.isNull(offset + 55) ? null : cursor
						.getString(offset + 55), // title
				cursor.isNull(offset + 56) ? null : cursor.getInt(offset + 56), // totalCount
				cursor.isNull(offset + 57) ? null : cursor
						.getString(offset + 57), // videoType
				cursor.isNull(offset + 58) ? null : cursor
						.getString(offset + 58), // videoUrl
				cursor.isNull(offset + 59) ? null : cursor
						.getString(offset + 59), // scope
				cursor.isNull(offset + 60) ? null : cursor
						.getString(offset + 60), // objectId
				cursor.isNull(offset + 61) ? null : new java.util.Date(cursor
						.getLong(offset + 61)), // _cacheUpdatedAt
				cursor.isNull(offset + 62) ? null : cursor.getLong(offset + 62) // apCachedRequestId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, CapitalMarketsContentService entity,
			int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setAlertDate(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setAllAttachments(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setAnalystId(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setAnalystType(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setAssetClass(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setAttachmentId(cursor.isNull(offset + 6) ? null : cursor
				.getInt(offset + 6));
		entity.setAuthorDetails(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setAuthorId(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setAuthorName(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setAuthors(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setCompany(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
		entity.setContentServicesType(cursor.isNull(offset + 12)
				? null
				: cursor.getString(offset + 12));
		entity.setContentType(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.setContentUrl(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
		entity.setDateString(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.setDocumentUrl(cursor.isNull(offset + 16) ? null : cursor
				.getString(offset + 16));
		entity.setEncryptedId(cursor.isNull(offset + 17) ? null : cursor
				.getString(offset + 17));
		entity.setFileLink(cursor.isNull(offset + 18) ? null : cursor
				.getString(offset + 18));
		entity.setFileName(cursor.isNull(offset + 19) ? null : cursor
				.getString(offset + 19));
		entity.setFileType(cursor.isNull(offset + 20) ? null : cursor
				.getString(offset + 20));
		entity.setFormatedPubDate(cursor.isNull(offset + 21) ? null : cursor
				.getString(offset + 21));
		entity.setFormattedDateStr(cursor.isNull(offset + 22) ? null : cursor
				.getString(offset + 22));
		entity.setHeadline(cursor.isNull(offset + 23) ? null : cursor
				.getString(offset + 23));
		entity.setHitCount(cursor.isNull(offset + 24) ? null : cursor
				.getInt(offset + 24));
		entity.setHtmlEscapedTitle(cursor.isNull(offset + 25) ? null : cursor
				.getString(offset + 25));
		entity.setImage(cursor.isNull(offset + 26) ? null : cursor
				.getString(offset + 26));
		entity.setImageGroup(cursor.isNull(offset + 27) ? null : cursor
				.getString(offset + 27));
		entity.setKv(cursor.isNull(offset + 28) ? null : cursor
				.getString(offset + 28));
		entity.setMedialUrlIos(cursor.isNull(offset + 29) ? null : cursor
				.getString(offset + 29));
		entity.setMediaUrlAndroid(cursor.isNull(offset + 30) ? null : cursor
				.getString(offset + 30));
		entity.setMenuCode(cursor.isNull(offset + 31) ? null : cursor
				.getString(offset + 31));
		entity.setMiliseconds(cursor.isNull(offset + 32) ? null : cursor
				.getString(offset + 32));
		entity.setOboFirstName(cursor.isNull(offset + 33) ? null : cursor
				.getString(offset + 33));
		entity.setOboLastName(cursor.isNull(offset + 34) ? null : cursor
				.getString(offset + 34));
		entity.setOboPreferredName(cursor.isNull(offset + 35) ? null : cursor
				.getString(offset + 35));
		entity.setPageCount(cursor.isNull(offset + 36) ? null : cursor
				.getInt(offset + 36));
		entity.setProductList(cursor.isNull(offset + 37) ? null : cursor
				.getString(offset + 37));
		entity.setProductType(cursor.isNull(offset + 38) ? null : cursor
				.getString(offset + 38));
		entity.setPubDate(cursor.isNull(offset + 39) ? null : cursor
				.getString(offset + 39));
		entity.setPubId(cursor.isNull(offset + 40) ? null : cursor
				.getString(offset + 40));
		entity.setPubKey(cursor.isNull(offset + 41) ? null : cursor
				.getString(offset + 41));
		entity.setRefArticleTitle(cursor.isNull(offset + 42) ? null : cursor
				.getString(offset + 42));
		entity.setRefArticleUrl(cursor.isNull(offset + 43) ? null : cursor
				.getString(offset + 43));
		entity.setRegion(cursor.isNull(offset + 44) ? null : cursor
				.getString(offset + 44));
		entity.setResdataUrl(cursor.isNull(offset + 45) ? null : cursor
				.getString(offset + 45));
		entity.setRnum(cursor.isNull(offset + 46) ? null : cursor
				.getString(offset + 46));
		entity.setScale(cursor.isNull(offset + 47) ? null : cursor
				.getString(offset + 47));
		entity.setSectors(cursor.isNull(offset + 48) ? null : cursor
				.getString(offset + 48));
		entity.setSource(cursor.isNull(offset + 49) ? null : cursor
				.getString(offset + 49));
		entity.setSummary(cursor.isNull(offset + 50) ? null : cursor
				.getString(offset + 50));
		entity.setSynopsis(cursor.isNull(offset + 51) ? null : cursor
				.getString(offset + 51));
		entity.setTemplate(cursor.isNull(offset + 52) ? null : cursor
				.getString(offset + 52));
		entity.setThemeId(cursor.isNull(offset + 53) ? null : cursor
				.getString(offset + 53));
		entity.setTickers(cursor.isNull(offset + 54) ? null : cursor
				.getString(offset + 54));
		entity.setTitle(cursor.isNull(offset + 55) ? null : cursor
				.getString(offset + 55));
		entity.setTotalCount(cursor.isNull(offset + 56) ? null : cursor
				.getInt(offset + 56));
		entity.setVideoType(cursor.isNull(offset + 57) ? null : cursor
				.getString(offset + 57));
		entity.setVideoUrl(cursor.isNull(offset + 58) ? null : cursor
				.getString(offset + 58));
		entity.setScope(cursor.isNull(offset + 59) ? null : cursor
				.getString(offset + 59));
		entity.setObjectId(cursor.isNull(offset + 60) ? null : cursor
				.getString(offset + 60));
		entity.set_cacheUpdatedAt(cursor.isNull(offset + 61)
				? null
				: new java.util.Date(cursor.getLong(offset + 61)));
		entity.setApCachedRequestId(cursor.isNull(offset + 62) ? null : cursor
				.getLong(offset + 62));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(CapitalMarketsContentService entity,
			long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(CapitalMarketsContentService entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession
					.getAPCachedRequestDao().getAllColumns());
			builder.append(" FROM CAPITALMARKETSCONTENTSERVICES T");
			builder.append(" LEFT JOIN APCACHED_REQUEST T0 ON T.'AP_CACHED_REQUEST_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected CapitalMarketsContentService loadCurrentDeep(Cursor cursor,
			boolean lock) {
		CapitalMarketsContentService entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		APCachedRequest aPCachedRequest = loadCurrentOther(
				daoSession.getAPCachedRequestDao(), cursor, offset);
		entity.setAPCachedRequest(aPCachedRequest);

		return entity;
	}

	public CapitalMarketsContentService loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[]{key.toString()};
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
	public List<CapitalMarketsContentService> loadAllDeepFromCursor(
			Cursor cursor) {
		int count = cursor.getCount();
		List<CapitalMarketsContentService> list = new ArrayList<CapitalMarketsContentService>(
				count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<CapitalMarketsContentService> loadDeepAllAndCloseCursor(
			Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<CapitalMarketsContentService> queryDeep(String where,
			String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
