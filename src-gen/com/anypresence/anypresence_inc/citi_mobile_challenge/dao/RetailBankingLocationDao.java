package com.anypresence.anypresence_inc.citi_mobile_challenge.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RETAILBANKINGLOCATIONS.
 */
public class RetailBankingLocationDao
		extends
			AbstractDao<RetailBankingLocation, Long> {

	public static final String TABLENAME = "RETAILBANKINGLOCATIONS";

	/**
	 * Properties of entity RetailBankingLocation.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property AddressLineOne = new Property(1,
				String.class, "addressLineOne", false, "ADDRESS_LINE_ONE");
		public final static Property AddressLineTwo = new Property(2,
				String.class, "addressLineTwo", false, "ADDRESS_LINE_TWO");
		public final static Property City = new Property(3, String.class,
				"city", false, "CITY");
		public final static Property Comments = new Property(4, String.class,
				"comments", false, "COMMENTS");
		public final static Property Country = new Property(5, String.class,
				"country", false, "COUNTRY");
		public final static Property ExternalLink = new Property(6,
				String.class, "externalLink", false, "EXTERNAL_LINK");
		public final static Property Latitude = new Property(7, String.class,
				"latitude", false, "LATITUDE");
		public final static Property LocationType = new Property(8,
				String.class, "locationType", false, "LOCATION_TYPE");
		public final static Property Longitude = new Property(9, String.class,
				"longitude", false, "LONGITUDE");
		public final static Property Name = new Property(10, String.class,
				"name", false, "NAME");
		public final static Property Phone = new Property(11, String.class,
				"phone", false, "PHONE");
		public final static Property PostalCode = new Property(12,
				String.class, "postalCode", false, "POSTAL_CODE");
		public final static Property State = new Property(13, String.class,
				"state", false, "STATE");
		public final static Property Scope = new Property(14, String.class,
				"scope", false, "SCOPE");
		public final static Property ObjectId = new Property(15, String.class,
				"objectId", false, "OBJECT_ID");
		public final static Property _cacheUpdatedAt = new Property(16,
				java.util.Date.class, "_cacheUpdatedAt", false,
				"_CACHE_UPDATED_AT");
		public final static Property ApCachedRequestId = new Property(17,
				Long.class, "apCachedRequestId", false, "AP_CACHED_REQUEST_ID");
	};

	private DaoSession daoSession;

	public RetailBankingLocationDao(DaoConfig config) {
		super(config);
	}

	public RetailBankingLocationDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'RETAILBANKINGLOCATIONS' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'ADDRESS_LINE_ONE' TEXT," + // 1: addressLineOne
				"'ADDRESS_LINE_TWO' TEXT," + // 2: addressLineTwo
				"'CITY' TEXT," + // 3: city
				"'COMMENTS' TEXT," + // 4: comments
				"'COUNTRY' TEXT," + // 5: country
				"'EXTERNAL_LINK' TEXT," + // 6: externalLink
				"'LATITUDE' TEXT," + // 7: latitude
				"'LOCATION_TYPE' TEXT," + // 8: locationType
				"'LONGITUDE' TEXT," + // 9: longitude
				"'NAME' TEXT," + // 10: name
				"'PHONE' TEXT," + // 11: phone
				"'POSTAL_CODE' TEXT," + // 12: postalCode
				"'STATE' TEXT," + // 13: state
				"'SCOPE' TEXT," + // 14: scope
				"'OBJECT_ID' TEXT," + // 15: objectId
				"'_CACHE_UPDATED_AT' INTEGER," + // 16: _cacheUpdatedAt
				"'AP_CACHED_REQUEST_ID' INTEGER);"); // 17: apCachedRequestId
		// Add Indexes
		db.execSQL("CREATE UNIQUE INDEX "
				+ constraint
				+ "IDX_RETAILBANKINGLOCATIONS_OBJECT_ID ON RETAILBANKINGLOCATIONS"
				+ " (OBJECT_ID);");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'RETAILBANKINGLOCATIONS'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, RetailBankingLocation entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String addressLineOne = entity.getAddressLineOne();
		if (addressLineOne != null) {
			stmt.bindString(2, addressLineOne);
		}

		String addressLineTwo = entity.getAddressLineTwo();
		if (addressLineTwo != null) {
			stmt.bindString(3, addressLineTwo);
		}

		String city = entity.getCity();
		if (city != null) {
			stmt.bindString(4, city);
		}

		String comments = entity.getComments();
		if (comments != null) {
			stmt.bindString(5, comments);
		}

		String country = entity.getCountry();
		if (country != null) {
			stmt.bindString(6, country);
		}

		String externalLink = entity.getExternalLink();
		if (externalLink != null) {
			stmt.bindString(7, externalLink);
		}

		String latitude = entity.getLatitude();
		if (latitude != null) {
			stmt.bindString(8, latitude);
		}

		String locationType = entity.getLocationType();
		if (locationType != null) {
			stmt.bindString(9, locationType);
		}

		String longitude = entity.getLongitude();
		if (longitude != null) {
			stmt.bindString(10, longitude);
		}

		String name = entity.getName();
		if (name != null) {
			stmt.bindString(11, name);
		}

		String phone = entity.getPhone();
		if (phone != null) {
			stmt.bindString(12, phone);
		}

		String postalCode = entity.getPostalCode();
		if (postalCode != null) {
			stmt.bindString(13, postalCode);
		}

		String state = entity.getState();
		if (state != null) {
			stmt.bindString(14, state);
		}

		String scope = entity.getScope();
		if (scope != null) {
			stmt.bindString(15, scope);
		}

		String objectId = entity.getObjectId();
		if (objectId != null) {
			stmt.bindString(16, objectId);
		}

		java.util.Date _cacheUpdatedAt = entity.get_cacheUpdatedAt();
		if (_cacheUpdatedAt != null) {
			stmt.bindLong(17, _cacheUpdatedAt.getTime());
		}

		Long apCachedRequestId = entity.getApCachedRequestId();
		if (apCachedRequestId != null) {
			stmt.bindLong(18, apCachedRequestId);
		}
	}

	@Override
	protected void attachEntity(RetailBankingLocation entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public RetailBankingLocation readEntity(Cursor cursor, int offset) {
		RetailBankingLocation entity = new RetailBankingLocation(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // addressLineOne
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // addressLineTwo
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // comments
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // country
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // externalLink
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // latitude
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // locationType
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // longitude
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // name
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // phone
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // postalCode
				cursor.isNull(offset + 13) ? null : cursor
						.getString(offset + 13), // state
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14), // scope
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15), // objectId
				cursor.isNull(offset + 16) ? null : new java.util.Date(cursor
						.getLong(offset + 16)), // _cacheUpdatedAt
				cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17) // apCachedRequestId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, RetailBankingLocation entity,
			int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setAddressLineOne(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setAddressLineTwo(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setCity(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setComments(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setCountry(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setExternalLink(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor
				.getString(offset + 7));
		entity.setLocationType(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setName(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setPhone(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
		entity.setPostalCode(cursor.isNull(offset + 12) ? null : cursor
				.getString(offset + 12));
		entity.setState(cursor.isNull(offset + 13) ? null : cursor
				.getString(offset + 13));
		entity.setScope(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
		entity.setObjectId(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.set_cacheUpdatedAt(cursor.isNull(offset + 16)
				? null
				: new java.util.Date(cursor.getLong(offset + 16)));
		entity.setApCachedRequestId(cursor.isNull(offset + 17) ? null : cursor
				.getLong(offset + 17));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(RetailBankingLocation entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(RetailBankingLocation entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession
					.getAPCachedRequestDao().getAllColumns());
			builder.append(" FROM RETAILBANKINGLOCATIONS T");
			builder.append(" LEFT JOIN APCACHED_REQUEST T0 ON T.'AP_CACHED_REQUEST_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected RetailBankingLocation loadCurrentDeep(Cursor cursor, boolean lock) {
		RetailBankingLocation entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		APCachedRequest aPCachedRequest = loadCurrentOther(
				daoSession.getAPCachedRequestDao(), cursor, offset);
		entity.setAPCachedRequest(aPCachedRequest);

		return entity;
	}

	public RetailBankingLocation loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[]{key.toString()};
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
	public List<RetailBankingLocation> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<RetailBankingLocation> list = new ArrayList<RetailBankingLocation>(
				count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<RetailBankingLocation> loadDeepAllAndCloseCursor(
			Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<RetailBankingLocation> queryDeep(String where,
			String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
