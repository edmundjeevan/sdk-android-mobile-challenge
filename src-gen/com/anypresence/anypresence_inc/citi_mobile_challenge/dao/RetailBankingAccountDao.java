package com.anypresence.anypresence_inc.citi_mobile_challenge.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.anypresence.anypresence_inc.citi_mobile_challenge.dao.RetailBankingAccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RETAILBANKINGACCOUNTS.
 */
public class RetailBankingAccountDao
		extends
			AbstractDao<RetailBankingAccount, Long> {

	public static final String TABLENAME = "RETAILBANKINGACCOUNTS";

	/**
	 * Properties of entity RetailBankingAccount.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property AccountStatus = new Property(1,
				String.class, "accountStatus", false, "ACCOUNT_STATUS");
		public final static Property Balances = new Property(2, String.class,
				"balances", false, "BALANCES");
		public final static Property CategoryCode = new Property(3,
				Integer.class, "categoryCode", false, "CATEGORY_CODE");
		public final static Property CopsIndicator = new Property(4,
				String.class, "copsIndicator", false, "COPS_INDICATOR");
		public final static Property DetailsExist = new Property(5,
				String.class, "detailsExist", false, "DETAILS_EXIST");
		public final static Property DisplayAcctNo = new Property(6,
				String.class, "displayAcctNo", false, "DISPLAY_ACCT_NO");
		public final static Property IsDestinationAccount = new Property(7,
				String.class, "isDestinationAccount", false,
				"IS_DESTINATION_ACCOUNT");
		public final static Property IsSourceAccount = new Property(8,
				String.class, "isSourceAccount", false, "IS_SOURCE_ACCOUNT");
		public final static Property Msgs = new Property(9, String.class,
				"msgs", false, "MSGS");
		public final static Property OffersIndicator = new Property(10,
				String.class, "offersIndicator", false, "OFFERS_INDICATOR");
		public final static Property ProductCurrency = new Property(11,
				String.class, "productCurrency", false, "PRODUCT_CURRENCY");
		public final static Property ProductDescription = new Property(12,
				String.class, "productDescription", false,
				"PRODUCT_DESCRIPTION");
		public final static Property ProductType = new Property(13,
				Integer.class, "productType", false, "PRODUCT_TYPE");
		public final static Property TxnExist = new Property(14, String.class,
				"txnExist", false, "TXN_EXIST");
		public final static Property Scope = new Property(15, String.class,
				"scope", false, "SCOPE");
		public final static Property ObjectId = new Property(16, String.class,
				"objectId", false, "OBJECT_ID");
		public final static Property _cacheUpdatedAt = new Property(17,
				java.util.Date.class, "_cacheUpdatedAt", false,
				"_CACHE_UPDATED_AT");
		public final static Property ApCachedRequestId = new Property(18,
				Long.class, "apCachedRequestId", false, "AP_CACHED_REQUEST_ID");
	};

	private DaoSession daoSession;

	public RetailBankingAccountDao(DaoConfig config) {
		super(config);
	}

	public RetailBankingAccountDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'RETAILBANKINGACCOUNTS' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'ACCOUNT_STATUS' TEXT," + // 1: accountStatus
				"'BALANCES' TEXT," + // 2: balances
				"'CATEGORY_CODE' INTEGER," + // 3: categoryCode
				"'COPS_INDICATOR' TEXT," + // 4: copsIndicator
				"'DETAILS_EXIST' TEXT," + // 5: detailsExist
				"'DISPLAY_ACCT_NO' TEXT," + // 6: displayAcctNo
				"'IS_DESTINATION_ACCOUNT' TEXT," + // 7: isDestinationAccount
				"'IS_SOURCE_ACCOUNT' TEXT," + // 8: isSourceAccount
				"'MSGS' TEXT," + // 9: msgs
				"'OFFERS_INDICATOR' TEXT," + // 10: offersIndicator
				"'PRODUCT_CURRENCY' TEXT," + // 11: productCurrency
				"'PRODUCT_DESCRIPTION' TEXT," + // 12: productDescription
				"'PRODUCT_TYPE' INTEGER," + // 13: productType
				"'TXN_EXIST' TEXT," + // 14: txnExist
				"'SCOPE' TEXT," + // 15: scope
				"'OBJECT_ID' TEXT," + // 16: objectId
				"'_CACHE_UPDATED_AT' INTEGER," + // 17: _cacheUpdatedAt
				"'AP_CACHED_REQUEST_ID' INTEGER);"); // 18: apCachedRequestId
		// Add Indexes
		db.execSQL("CREATE UNIQUE INDEX "
				+ constraint
				+ "IDX_RETAILBANKINGACCOUNTS_OBJECT_ID ON RETAILBANKINGACCOUNTS"
				+ " (OBJECT_ID);");
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'RETAILBANKINGACCOUNTS'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, RetailBankingAccount entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String accountStatus = entity.getAccountStatus();
		if (accountStatus != null) {
			stmt.bindString(2, accountStatus);
		}

		String balances = entity.getBalances();
		if (balances != null) {
			stmt.bindString(3, balances);
		}

		Integer categoryCode = entity.getCategoryCode();
		if (categoryCode != null) {
			stmt.bindLong(4, categoryCode);
		}

		String copsIndicator = entity.getCopsIndicator();
		if (copsIndicator != null) {
			stmt.bindString(5, copsIndicator);
		}

		String detailsExist = entity.getDetailsExist();
		if (detailsExist != null) {
			stmt.bindString(6, detailsExist);
		}

		String displayAcctNo = entity.getDisplayAcctNo();
		if (displayAcctNo != null) {
			stmt.bindString(7, displayAcctNo);
		}

		String isDestinationAccount = entity.getIsDestinationAccount();
		if (isDestinationAccount != null) {
			stmt.bindString(8, isDestinationAccount);
		}

		String isSourceAccount = entity.getIsSourceAccount();
		if (isSourceAccount != null) {
			stmt.bindString(9, isSourceAccount);
		}

		String msgs = entity.getMsgs();
		if (msgs != null) {
			stmt.bindString(10, msgs);
		}

		String offersIndicator = entity.getOffersIndicator();
		if (offersIndicator != null) {
			stmt.bindString(11, offersIndicator);
		}

		String productCurrency = entity.getProductCurrency();
		if (productCurrency != null) {
			stmt.bindString(12, productCurrency);
		}

		String productDescription = entity.getProductDescription();
		if (productDescription != null) {
			stmt.bindString(13, productDescription);
		}

		Integer productType = entity.getProductType();
		if (productType != null) {
			stmt.bindLong(14, productType);
		}

		String txnExist = entity.getTxnExist();
		if (txnExist != null) {
			stmt.bindString(15, txnExist);
		}

		String scope = entity.getScope();
		if (scope != null) {
			stmt.bindString(16, scope);
		}

		String objectId = entity.getObjectId();
		if (objectId != null) {
			stmt.bindString(17, objectId);
		}

		java.util.Date _cacheUpdatedAt = entity.get_cacheUpdatedAt();
		if (_cacheUpdatedAt != null) {
			stmt.bindLong(18, _cacheUpdatedAt.getTime());
		}

		Long apCachedRequestId = entity.getApCachedRequestId();
		if (apCachedRequestId != null) {
			stmt.bindLong(19, apCachedRequestId);
		}
	}

	@Override
	protected void attachEntity(RetailBankingAccount entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public RetailBankingAccount readEntity(Cursor cursor, int offset) {
		RetailBankingAccount entity = new RetailBankingAccount(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountStatus
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // balances
				cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // categoryCode
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // copsIndicator
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // detailsExist
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // displayAcctNo
				cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isDestinationAccount
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isSourceAccount
				cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // msgs
				cursor.isNull(offset + 10) ? null : cursor
						.getString(offset + 10), // offersIndicator
				cursor.isNull(offset + 11) ? null : cursor
						.getString(offset + 11), // productCurrency
				cursor.isNull(offset + 12) ? null : cursor
						.getString(offset + 12), // productDescription
				cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // productType
				cursor.isNull(offset + 14) ? null : cursor
						.getString(offset + 14), // txnExist
				cursor.isNull(offset + 15) ? null : cursor
						.getString(offset + 15), // scope
				cursor.isNull(offset + 16) ? null : cursor
						.getString(offset + 16), // objectId
				cursor.isNull(offset + 17) ? null : new java.util.Date(cursor
						.getLong(offset + 17)), // _cacheUpdatedAt
				cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18) // apCachedRequestId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, RetailBankingAccount entity,
			int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setAccountStatus(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setBalances(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setCategoryCode(cursor.isNull(offset + 3) ? null : cursor
				.getInt(offset + 3));
		entity.setCopsIndicator(cursor.isNull(offset + 4) ? null : cursor
				.getString(offset + 4));
		entity.setDetailsExist(cursor.isNull(offset + 5) ? null : cursor
				.getString(offset + 5));
		entity.setDisplayAcctNo(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
		entity.setIsDestinationAccount(cursor.isNull(offset + 7)
				? null
				: cursor.getString(offset + 7));
		entity.setIsSourceAccount(cursor.isNull(offset + 8) ? null : cursor
				.getString(offset + 8));
		entity.setMsgs(cursor.isNull(offset + 9) ? null : cursor
				.getString(offset + 9));
		entity.setOffersIndicator(cursor.isNull(offset + 10) ? null : cursor
				.getString(offset + 10));
		entity.setProductCurrency(cursor.isNull(offset + 11) ? null : cursor
				.getString(offset + 11));
		entity.setProductDescription(cursor.isNull(offset + 12) ? null : cursor
				.getString(offset + 12));
		entity.setProductType(cursor.isNull(offset + 13) ? null : cursor
				.getInt(offset + 13));
		entity.setTxnExist(cursor.isNull(offset + 14) ? null : cursor
				.getString(offset + 14));
		entity.setScope(cursor.isNull(offset + 15) ? null : cursor
				.getString(offset + 15));
		entity.setObjectId(cursor.isNull(offset + 16) ? null : cursor
				.getString(offset + 16));
		entity.set_cacheUpdatedAt(cursor.isNull(offset + 17)
				? null
				: new java.util.Date(cursor.getLong(offset + 17)));
		entity.setApCachedRequestId(cursor.isNull(offset + 18) ? null : cursor
				.getLong(offset + 18));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(RetailBankingAccount entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(RetailBankingAccount entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

	private String selectDeep;

	protected String getSelectDeep() {
		if (selectDeep == null) {
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession
					.getAPCachedRequestDao().getAllColumns());
			builder.append(" FROM RETAILBANKINGACCOUNTS T");
			builder.append(" LEFT JOIN APCACHED_REQUEST T0 ON T.'AP_CACHED_REQUEST_ID'=T0.'_id'");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected RetailBankingAccount loadCurrentDeep(Cursor cursor, boolean lock) {
		RetailBankingAccount entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		APCachedRequest aPCachedRequest = loadCurrentOther(
				daoSession.getAPCachedRequestDao(), cursor, offset);
		entity.setAPCachedRequest(aPCachedRequest);

		return entity;
	}

	public RetailBankingAccount loadDeep(Long key) {
		assertSinglePk();
		if (key == null) {
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[]{key.toString()};
		Cursor cursor = db.rawQuery(sql, keyArray);

		try {
			boolean available = cursor.moveToFirst();
			if (!available) {
				return null;
			} else if (!cursor.isLast()) {
				throw new IllegalStateException(
						"Expected unique result, but count was "
								+ cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		} finally {
			cursor.close();
		}
	}

	/** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
	public List<RetailBankingAccount> loadAllDeepFromCursor(Cursor cursor) {
		int count = cursor.getCount();
		List<RetailBankingAccount> list = new ArrayList<RetailBankingAccount>(
				count);

		if (cursor.moveToFirst()) {
			if (identityScope != null) {
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try {
				do {
					list.add(loadCurrentDeep(cursor, false));
				} while (cursor.moveToNext());
			} finally {
				if (identityScope != null) {
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<RetailBankingAccount> loadDeepAllAndCloseCursor(Cursor cursor) {
		try {
			return loadAllDeepFromCursor(cursor);
		} finally {
			cursor.close();
		}
	}

	/** A raw-style query where you can pass any WHERE clause and arguments. */
	public List<RetailBankingAccount> queryDeep(String where,
			String... selectionArg) {
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
