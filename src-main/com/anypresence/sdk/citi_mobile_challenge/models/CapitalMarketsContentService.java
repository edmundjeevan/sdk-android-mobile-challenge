package com.anypresence.sdk.citi_mobile_challenge.models;

//
//  CapitalMarketsContentService.java
//  
//
//  Generated by AnyPresence, Inc on 2015-09-21
//  Copyright (c) 2015. All rights reserved.
//

import com.google.common.util.concurrent.*;
import java.util.*;
import java.util.concurrent.Callable;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import java.lang.reflect.Field;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import com.anypresence.rails_droid.*;
import com.anypresence.rails_droid.http.RequestMethod;
import com.anypresence.sdk.acl.*;
import com.anypresence.sdk.callbacks.*;
import com.anypresence.sdk.query.*;
import com.anypresence.sdk.config.Config;
import com.anypresence.sdk.acl.UnauthorizedException;
import com.anypresence.sdk.*;
import com.anypresence.sdk.cache.*;
import com.anypresence.sdk.cache.greendao.*;
import com.anypresence.sdk.parse.*;
import java.net.MalformedURLException;
import com.anypresence.rails_droid.RemoteRailsConfig;
import com.anypresence.rails_droid.http.RouterAdapter;
import com.anypresence.sdk.http.HttpAdapter;
import com.anypresence.sdk.Utility;

import com.jayway.jsonpath.PathNotFoundException;

import static com.anypresence.sdk.config.Config.DEBUG_MODE;
import static com.anypresence.sdk.http.HttpAdapter.JSON;
import static com.anypresence.sdk.http.HttpAdapter.XML;
import static com.anypresence.sdk.http.HttpAdapter.FORM_ENCODED;

/**
 * This class represents a model constructed from the Designer.
 *
 * Fields that are to be serialized into json must be annotated with <tt>@Expose</tt>.
 */
public final class CapitalMarketsContentService
		extends
			com.anypresence.sdk.APObject {
	private static final long serialVersionUID = 1L;

	private static final Log log = LogFactory
			.getLog(CapitalMarketsContentService.class);

	private static final String TAG = "CapitalMarketsContentService";

	/**
	 *  Scope names for CapitalMarketsContentService.
	 */
	public static class Scopes {

		public final static String ALL = "all";

		public final static String EXACT_MATCH = "exact_match";

		public final static String COUNT = "count";

		public final static String COUNT_EXACT_MATCH = "count_exact_match";

		public final static String CONTENT_SERVICES = "content_services";

	}

	private static QueryScope getScope(String scope) {
		if (getQueryScopes().get(scope) == null) {
			return getQueryScopes().get("all");
		}

		return getQueryScopes().get(scope);
	}

	@SerializedName("id")
	@Expose
	private ObjectId id;
	// Getter/Setter for the id
	@Override
	public ObjectId getObjectId() {
		return id;
	}

	@Override
	public void setObjectId(ObjectId id) {
		this.id = id;
	}

	public ObjectId getId() {
		return getObjectId();
	}

	public void setId(ObjectId id) {
		setObjectId(id);
	}

	public void setIdAsString(String id) {
		setObjectId(new ObjectId(id));
	}

	// Getters/setters for field definitions.

	@SerializedName("alert_date")
	@Expose
	private String alertDate;

	public String getAlertDate() {
		return alertDate;
	}

	public void setAlertDate(String alertDate) {
		this.alertDate = alertDate;
	}

	@SerializedName("all_attachments")
	@Expose
	private ArrayList<Object> allAttachments;

	public ArrayList<Object> getAllAttachments() {
		return allAttachments;
	}

	public void setAllAttachments(ArrayList<Object> allAttachments) {
		this.allAttachments = allAttachments;
	}

	@SerializedName("analyst_id")
	@Expose
	private String analystId;

	public String getAnalystId() {
		return analystId;
	}

	public void setAnalystId(String analystId) {
		this.analystId = analystId;
	}

	@SerializedName("analyst_type")
	@Expose
	private String analystType;

	public String getAnalystType() {
		return analystType;
	}

	public void setAnalystType(String analystType) {
		this.analystType = analystType;
	}

	@SerializedName("asset_class")
	@Expose
	private String assetClass;

	public String getAssetClass() {
		return assetClass;
	}

	public void setAssetClass(String assetClass) {
		this.assetClass = assetClass;
	}

	@SerializedName("attachment_id")
	@Expose
	private Integer attachmentId;

	public Integer getAttachmentId() {
		return attachmentId;
	}

	public void setAttachmentId(Integer attachmentId) {
		this.attachmentId = attachmentId;
	}

	@SerializedName("author_details")
	@Expose
	private ArrayList<Object> authorDetails;

	public ArrayList<Object> getAuthorDetails() {
		return authorDetails;
	}

	public void setAuthorDetails(ArrayList<Object> authorDetails) {
		this.authorDetails = authorDetails;
	}

	@SerializedName("author_id")
	@Expose
	private String authorId;

	public String getAuthorId() {
		return authorId;
	}

	public void setAuthorId(String authorId) {
		this.authorId = authorId;
	}

	@SerializedName("author_name")
	@Expose
	private String authorName;

	public String getAuthorName() {
		return authorName;
	}

	public void setAuthorName(String authorName) {
		this.authorName = authorName;
	}

	@SerializedName("authors")
	@Expose
	private String authors;

	public String getAuthors() {
		return authors;
	}

	public void setAuthors(String authors) {
		this.authors = authors;
	}

	@SerializedName("company")
	@Expose
	private String company;

	public String getCompany() {
		return company;
	}

	public void setCompany(String company) {
		this.company = company;
	}

	@SerializedName("content_services_type")
	@Expose
	private String contentServicesType;

	public String getContentServicesType() {
		return contentServicesType;
	}

	public void setContentServicesType(String contentServicesType) {
		this.contentServicesType = contentServicesType;
	}

	@SerializedName("content_type")
	@Expose
	private String contentType;

	public String getContentType() {
		return contentType;
	}

	public void setContentType(String contentType) {
		this.contentType = contentType;
	}

	@SerializedName("content_url")
	@Expose
	private String contentUrl;

	public String getContentUrl() {
		return contentUrl;
	}

	public void setContentUrl(String contentUrl) {
		this.contentUrl = contentUrl;
	}

	@SerializedName("date_string")
	@Expose
	private String dateString;

	public String getDateString() {
		return dateString;
	}

	public void setDateString(String dateString) {
		this.dateString = dateString;
	}

	@SerializedName("document_url")
	@Expose
	private String documentUrl;

	public String getDocumentUrl() {
		return documentUrl;
	}

	public void setDocumentUrl(String documentUrl) {
		this.documentUrl = documentUrl;
	}

	@SerializedName("encrypted_id")
	@Expose
	private String encryptedId;

	public String getEncryptedId() {
		return encryptedId;
	}

	public void setEncryptedId(String encryptedId) {
		this.encryptedId = encryptedId;
	}

	@SerializedName("file_link")
	@Expose
	private String fileLink;

	public String getFileLink() {
		return fileLink;
	}

	public void setFileLink(String fileLink) {
		this.fileLink = fileLink;
	}

	@SerializedName("file_name")
	@Expose
	private String fileName;

	public String getFileName() {
		return fileName;
	}

	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	@SerializedName("file_type")
	@Expose
	private String fileType;

	public String getFileType() {
		return fileType;
	}

	public void setFileType(String fileType) {
		this.fileType = fileType;
	}

	@SerializedName("formated_pub_date")
	@Expose
	private String formatedPubDate;

	public String getFormatedPubDate() {
		return formatedPubDate;
	}

	public void setFormatedPubDate(String formatedPubDate) {
		this.formatedPubDate = formatedPubDate;
	}

	@SerializedName("formatted_date_str")
	@Expose
	private String formattedDateStr;

	public String getFormattedDateStr() {
		return formattedDateStr;
	}

	public void setFormattedDateStr(String formattedDateStr) {
		this.formattedDateStr = formattedDateStr;
	}

	@SerializedName("headline")
	@Expose
	private String headline;

	public String getHeadline() {
		return headline;
	}

	public void setHeadline(String headline) {
		this.headline = headline;
	}

	@SerializedName("hit_count")
	@Expose
	private Integer hitCount;

	public Integer getHitCount() {
		return hitCount;
	}

	public void setHitCount(Integer hitCount) {
		this.hitCount = hitCount;
	}

	@SerializedName("html_escaped_title")
	@Expose
	private String htmlEscapedTitle;

	public String getHtmlEscapedTitle() {
		return htmlEscapedTitle;
	}

	public void setHtmlEscapedTitle(String htmlEscapedTitle) {
		this.htmlEscapedTitle = htmlEscapedTitle;
	}

	@SerializedName("image")
	@Expose
	private String image;

	public String getImage() {
		return image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@SerializedName("image_group")
	@Expose
	private ArrayList<Object> imageGroup;

	public ArrayList<Object> getImageGroup() {
		return imageGroup;
	}

	public void setImageGroup(ArrayList<Object> imageGroup) {
		this.imageGroup = imageGroup;
	}

	@SerializedName("kv")
	@Expose
	private String kv;

	public String getKv() {
		return kv;
	}

	public void setKv(String kv) {
		this.kv = kv;
	}

	@SerializedName("medial_url_ios")
	@Expose
	private String medialUrlIos;

	public String getMedialUrlIos() {
		return medialUrlIos;
	}

	public void setMedialUrlIos(String medialUrlIos) {
		this.medialUrlIos = medialUrlIos;
	}

	@SerializedName("media_url_android")
	@Expose
	private String mediaUrlAndroid;

	public String getMediaUrlAndroid() {
		return mediaUrlAndroid;
	}

	public void setMediaUrlAndroid(String mediaUrlAndroid) {
		this.mediaUrlAndroid = mediaUrlAndroid;
	}

	@SerializedName("menu_code")
	@Expose
	private String menuCode;

	public String getMenuCode() {
		return menuCode;
	}

	public void setMenuCode(String menuCode) {
		this.menuCode = menuCode;
	}

	@SerializedName("miliseconds")
	@Expose
	private String miliseconds;

	public String getMiliseconds() {
		return miliseconds;
	}

	public void setMiliseconds(String miliseconds) {
		this.miliseconds = miliseconds;
	}

	@SerializedName("obo_first_name")
	@Expose
	private String oboFirstName;

	public String getOboFirstName() {
		return oboFirstName;
	}

	public void setOboFirstName(String oboFirstName) {
		this.oboFirstName = oboFirstName;
	}

	@SerializedName("obo_last_name")
	@Expose
	private String oboLastName;

	public String getOboLastName() {
		return oboLastName;
	}

	public void setOboLastName(String oboLastName) {
		this.oboLastName = oboLastName;
	}

	@SerializedName("obo_preferred_name")
	@Expose
	private String oboPreferredName;

	public String getOboPreferredName() {
		return oboPreferredName;
	}

	public void setOboPreferredName(String oboPreferredName) {
		this.oboPreferredName = oboPreferredName;
	}

	@SerializedName("page_count")
	@Expose
	private Integer pageCount;

	public Integer getPageCount() {
		return pageCount;
	}

	public void setPageCount(Integer pageCount) {
		this.pageCount = pageCount;
	}

	@SerializedName("product_list")
	@Expose
	private ArrayList<Object> productList;

	public ArrayList<Object> getProductList() {
		return productList;
	}

	public void setProductList(ArrayList<Object> productList) {
		this.productList = productList;
	}

	@SerializedName("product_type")
	@Expose
	private String productType;

	public String getProductType() {
		return productType;
	}

	public void setProductType(String productType) {
		this.productType = productType;
	}

	@SerializedName("pub_date")
	@Expose
	private String pubDate;

	public String getPubDate() {
		return pubDate;
	}

	public void setPubDate(String pubDate) {
		this.pubDate = pubDate;
	}

	@SerializedName("pub_id")
	@Expose
	private String pubId;

	public String getPubId() {
		return pubId;
	}

	public void setPubId(String pubId) {
		this.pubId = pubId;
	}

	@SerializedName("pub_key")
	@Expose
	private String pubKey;

	public String getPubKey() {
		return pubKey;
	}

	public void setPubKey(String pubKey) {
		this.pubKey = pubKey;
	}

	@SerializedName("ref_article_title")
	@Expose
	private String refArticleTitle;

	public String getRefArticleTitle() {
		return refArticleTitle;
	}

	public void setRefArticleTitle(String refArticleTitle) {
		this.refArticleTitle = refArticleTitle;
	}

	@SerializedName("ref_article_url")
	@Expose
	private String refArticleUrl;

	public String getRefArticleUrl() {
		return refArticleUrl;
	}

	public void setRefArticleUrl(String refArticleUrl) {
		this.refArticleUrl = refArticleUrl;
	}

	@SerializedName("region")
	@Expose
	private String region;

	public String getRegion() {
		return region;
	}

	public void setRegion(String region) {
		this.region = region;
	}

	@SerializedName("resdata_url")
	@Expose
	private String resdataUrl;

	public String getResdataUrl() {
		return resdataUrl;
	}

	public void setResdataUrl(String resdataUrl) {
		this.resdataUrl = resdataUrl;
	}

	@SerializedName("rnum")
	@Expose
	private String rnum;

	public String getRnum() {
		return rnum;
	}

	public void setRnum(String rnum) {
		this.rnum = rnum;
	}

	@SerializedName("scale")
	@Expose
	private ArrayList<Object> scale;

	public ArrayList<Object> getScale() {
		return scale;
	}

	public void setScale(ArrayList<Object> scale) {
		this.scale = scale;
	}

	@SerializedName("sectors")
	@Expose
	private String sectors;

	public String getSectors() {
		return sectors;
	}

	public void setSectors(String sectors) {
		this.sectors = sectors;
	}

	@SerializedName("source")
	@Expose
	private String source;

	public String getSource() {
		return source;
	}

	public void setSource(String source) {
		this.source = source;
	}

	@SerializedName("summary")
	@Expose
	private String summary;

	public String getSummary() {
		return summary;
	}

	public void setSummary(String summary) {
		this.summary = summary;
	}

	@SerializedName("synopsis")
	@Expose
	private String synopsis;

	public String getSynopsis() {
		return synopsis;
	}

	public void setSynopsis(String synopsis) {
		this.synopsis = synopsis;
	}

	@SerializedName("template")
	@Expose
	private String template;

	public String getTemplate() {
		return template;
	}

	public void setTemplate(String template) {
		this.template = template;
	}

	@SerializedName("theme_id")
	@Expose
	private String themeId;

	public String getThemeId() {
		return themeId;
	}

	public void setThemeId(String themeId) {
		this.themeId = themeId;
	}

	@SerializedName("tickers")
	@Expose
	private String tickers;

	public String getTickers() {
		return tickers;
	}

	public void setTickers(String tickers) {
		this.tickers = tickers;
	}

	@SerializedName("title")
	@Expose
	private String title;

	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@SerializedName("total_count")
	@Expose
	private Integer totalCount;

	public Integer getTotalCount() {
		return totalCount;
	}

	public void setTotalCount(Integer totalCount) {
		this.totalCount = totalCount;
	}

	@SerializedName("video_type")
	@Expose
	private String videoType;

	public String getVideoType() {
		return videoType;
	}

	public void setVideoType(String videoType) {
		this.videoType = videoType;
	}

	@SerializedName("video_url")
	@Expose
	private String videoUrl;

	public String getVideoUrl() {
		return videoUrl;
	}

	public void setVideoUrl(String videoUrl) {
		this.videoUrl = videoUrl;
	}

	/**
	 * Copies provided object.
	 */
	public static final CapitalMarketsContentService copy(
			CapitalMarketsContentService orig) {
		final CapitalMarketsContentService newObject = new CapitalMarketsContentService();

		if (orig.getId() != null)
			newObject.setId(new ObjectId(orig.getId()));

		if (orig.getAlertDate() != null)
			newObject.setAlertDate(new String(orig.getAlertDate()));

		if (orig.getAllAttachments() != null) {
			ArrayList<Object> _allAttachments = new ArrayList<Object>();
			_allAttachments.addAll(orig.getAllAttachments());
			newObject.setAllAttachments(_allAttachments);
		}

		if (orig.getAnalystId() != null)
			newObject.setAnalystId(new String(orig.getAnalystId()));

		if (orig.getAnalystType() != null)
			newObject.setAnalystType(new String(orig.getAnalystType()));

		if (orig.getAssetClass() != null)
			newObject.setAssetClass(new String(orig.getAssetClass()));

		if (orig.getAttachmentId() != null)
			newObject.setAttachmentId(new Integer(orig.getAttachmentId()));

		if (orig.getAuthorDetails() != null) {
			ArrayList<Object> _authorDetails = new ArrayList<Object>();
			_authorDetails.addAll(orig.getAuthorDetails());
			newObject.setAuthorDetails(_authorDetails);
		}

		if (orig.getAuthorId() != null)
			newObject.setAuthorId(new String(orig.getAuthorId()));

		if (orig.getAuthorName() != null)
			newObject.setAuthorName(new String(orig.getAuthorName()));

		if (orig.getAuthors() != null)
			newObject.setAuthors(new String(orig.getAuthors()));

		if (orig.getCompany() != null)
			newObject.setCompany(new String(orig.getCompany()));

		if (orig.getContentServicesType() != null)
			newObject.setContentServicesType(new String(orig
					.getContentServicesType()));

		if (orig.getContentType() != null)
			newObject.setContentType(new String(orig.getContentType()));

		if (orig.getContentUrl() != null)
			newObject.setContentUrl(new String(orig.getContentUrl()));

		if (orig.getDateString() != null)
			newObject.setDateString(new String(orig.getDateString()));

		if (orig.getDocumentUrl() != null)
			newObject.setDocumentUrl(new String(orig.getDocumentUrl()));

		if (orig.getEncryptedId() != null)
			newObject.setEncryptedId(new String(orig.getEncryptedId()));

		if (orig.getFileLink() != null)
			newObject.setFileLink(new String(orig.getFileLink()));

		if (orig.getFileName() != null)
			newObject.setFileName(new String(orig.getFileName()));

		if (orig.getFileType() != null)
			newObject.setFileType(new String(orig.getFileType()));

		if (orig.getFormatedPubDate() != null)
			newObject.setFormatedPubDate(new String(orig.getFormatedPubDate()));

		if (orig.getFormattedDateStr() != null)
			newObject
					.setFormattedDateStr(new String(orig.getFormattedDateStr()));

		if (orig.getHeadline() != null)
			newObject.setHeadline(new String(orig.getHeadline()));

		if (orig.getHitCount() != null)
			newObject.setHitCount(new Integer(orig.getHitCount()));

		if (orig.getHtmlEscapedTitle() != null)
			newObject
					.setHtmlEscapedTitle(new String(orig.getHtmlEscapedTitle()));

		if (orig.getImage() != null)
			newObject.setImage(new String(orig.getImage()));

		if (orig.getImageGroup() != null) {
			ArrayList<Object> _imageGroup = new ArrayList<Object>();
			_imageGroup.addAll(orig.getImageGroup());
			newObject.setImageGroup(_imageGroup);
		}

		if (orig.getKv() != null)
			newObject.setKv(new String(orig.getKv()));

		if (orig.getMedialUrlIos() != null)
			newObject.setMedialUrlIos(new String(orig.getMedialUrlIos()));

		if (orig.getMediaUrlAndroid() != null)
			newObject.setMediaUrlAndroid(new String(orig.getMediaUrlAndroid()));

		if (orig.getMenuCode() != null)
			newObject.setMenuCode(new String(orig.getMenuCode()));

		if (orig.getMiliseconds() != null)
			newObject.setMiliseconds(new String(orig.getMiliseconds()));

		if (orig.getOboFirstName() != null)
			newObject.setOboFirstName(new String(orig.getOboFirstName()));

		if (orig.getOboLastName() != null)
			newObject.setOboLastName(new String(orig.getOboLastName()));

		if (orig.getOboPreferredName() != null)
			newObject
					.setOboPreferredName(new String(orig.getOboPreferredName()));

		if (orig.getPageCount() != null)
			newObject.setPageCount(new Integer(orig.getPageCount()));

		if (orig.getProductList() != null) {
			ArrayList<Object> _productList = new ArrayList<Object>();
			_productList.addAll(orig.getProductList());
			newObject.setProductList(_productList);
		}

		if (orig.getProductType() != null)
			newObject.setProductType(new String(orig.getProductType()));

		if (orig.getPubDate() != null)
			newObject.setPubDate(new String(orig.getPubDate()));

		if (orig.getPubId() != null)
			newObject.setPubId(new String(orig.getPubId()));

		if (orig.getPubKey() != null)
			newObject.setPubKey(new String(orig.getPubKey()));

		if (orig.getRefArticleTitle() != null)
			newObject.setRefArticleTitle(new String(orig.getRefArticleTitle()));

		if (orig.getRefArticleUrl() != null)
			newObject.setRefArticleUrl(new String(orig.getRefArticleUrl()));

		if (orig.getRegion() != null)
			newObject.setRegion(new String(orig.getRegion()));

		if (orig.getResdataUrl() != null)
			newObject.setResdataUrl(new String(orig.getResdataUrl()));

		if (orig.getRnum() != null)
			newObject.setRnum(new String(orig.getRnum()));

		if (orig.getScale() != null) {
			ArrayList<Object> _scale = new ArrayList<Object>();
			_scale.addAll(orig.getScale());
			newObject.setScale(_scale);
		}

		if (orig.getSectors() != null)
			newObject.setSectors(new String(orig.getSectors()));

		if (orig.getSource() != null)
			newObject.setSource(new String(orig.getSource()));

		if (orig.getSummary() != null)
			newObject.setSummary(new String(orig.getSummary()));

		if (orig.getSynopsis() != null)
			newObject.setSynopsis(new String(orig.getSynopsis()));

		if (orig.getTemplate() != null)
			newObject.setTemplate(new String(orig.getTemplate()));

		if (orig.getThemeId() != null)
			newObject.setThemeId(new String(orig.getThemeId()));

		if (orig.getTickers() != null)
			newObject.setTickers(new String(orig.getTickers()));

		if (orig.getTitle() != null)
			newObject.setTitle(new String(orig.getTitle()));

		if (orig.getTotalCount() != null)
			newObject.setTotalCount(new Integer(orig.getTotalCount()));

		if (orig.getVideoType() != null)
			newObject.setVideoType(new String(orig.getVideoType()));

		if (orig.getVideoUrl() != null)
			newObject.setVideoUrl(new String(orig.getVideoUrl()));

		return newObject;
	}

	// Query scopes
	private static Map<String, QueryScope> queryScopes = new HashMap<String, QueryScope>();

	public void setQueryScopes(Map<String, QueryScope> queryScopes) {
		this.queryScopes = queryScopes;
	}

	public static Map<String, QueryScope> getQueryScopes() {
		return queryScopes;
	}

	static {

		QueryScope queryScopeall = new QueryScope();
		queryScopeall.setName("all");

		queryScopes.put(queryScopeall.getName(), queryScopeall);

		QueryScope queryScopeexact_match = new QueryScope();
		queryScopeexact_match.setName("exact_match");

		queryScopes.put(queryScopeexact_match.getName(), queryScopeexact_match);

		QueryScope queryScopecount = new QueryScope();
		queryScopecount.setName("count");

		queryScopes.put(queryScopecount.getName(), queryScopecount);

		QueryScope queryScopecount_exact_match = new QueryScope();
		queryScopecount_exact_match.setName("count_exact_match");

		queryScopes.put(queryScopecount_exact_match.getName(),
				queryScopecount_exact_match);

		QueryScope queryScopecontent_services = new QueryScope();
		queryScopecontent_services.setName("content_services");

		QueryField queryFieldContentServicesType154349650 = new QueryField();
		queryFieldContentServicesType154349650.setIsAssignable(true);
		queryFieldContentServicesType154349650
				.setFieldName("content_services_type");
		queryFieldContentServicesType154349650.setParamName("type");
		try {
			queryFieldContentServicesType154349650.setValue("");
		} catch (UnassignableQueryFieldException e) {
			// Need to handle this.
		}
		queryScopecontent_services.getQueryFields().put(
				queryFieldContentServicesType154349650.getParamName(),
				queryFieldContentServicesType154349650);

		queryScopes.put(queryScopecontent_services.getName(),
				queryScopecontent_services);

	}

	/**
	 * Fetches a <tt>CapitalMarketsContentService</tt> with the provided <tt>objectId</tt>.
	 *
	 * @param objectId the id of the object
	 * @return an instance of <tt>CapitalMarketsContentService</tt>
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static CapitalMarketsContentService fetch(String objectId)
			throws RemoteRequestException {
		RemoteRequest.RemoteRequestBuilder remoteRequestBuilder = RemoteRailsConfig
				.getRouterAdapterByClassOrUseDefaultAdapter(
						CapitalMarketsContentService.class)
				.createRemoteRequestBuilder(RequestMethod.GET,
						CapitalMarketsContentService.class);

		CapitalMarketsContentService object = new CapitalMarketsContentService();
		object.setObjectIdAsString(objectId);

		remoteRequestBuilder.context(object);

		RemoteRequest remoteRequest = remoteRequestBuilder
				.createRemoteRequest();
		remoteRequest = Utility.interpolateRemoteRequest(remoteRequest);

		return com.anypresence.sdk.APObject.fetch(remoteRequest,
				CapitalMarketsContentService.class);
	}

	/**
	 * Fetches a <tt>CapitalMarketsContentService</tt> with the provided <tt>objectId</tt> in the background.
	 *
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * CapitalMarketsContentService.fetchInBackground("123", new APCallback<CapitalMarketsContentService>() {
	 *     
	 *     public void finished(CapitalMarketsContentService object, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Object fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch object!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param objectId the id of the object
	 * @param futureCallback the callback that handles the result of the request.
	
	 * @return the cached <tt>CapitalMarketsContentService</tt> if it exists, otherwise, null.
	
	 */
	public static CapitalMarketsContentService

	fetchInBackground(String objectId,
			IAPFutureCallback<CapitalMarketsContentService> futureCallback) {

		return com.anypresence.sdk.APObject.fetchInBackground(objectId,
				CapitalMarketsContentService.class, futureCallback);

	}

	/**
	 * Queries for <tt>CapitalMarketsContentService</tt> with the provided <tt>scope</tt>.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<CapitalMarketsContentService> query(String scope)
			throws RemoteRequestException {
		return query(scope, null, null, null);
	}

	/**
	 * Queries for <tt>CapitalMarketsContentService</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<CapitalMarketsContentService> query(String scope,
			Map<String, String> params, Integer offset, Integer limit)
			throws RemoteRequestException {
		RemoteRequest.RemoteRequestBuilder remoteRequestBuilder = RemoteRailsConfig
				.getRouterAdapterByClassOrUseDefaultAdapter(
						CapitalMarketsContentService.class)
				.createRemoteRequestBuilder(scope, RequestMethod.GET,
						CapitalMarketsContentService.class);
		remoteRequestBuilder.query(scope);
		if (params != null) {
			remoteRequestBuilder.addToParameters(params);
			remoteRequestBuilder.context(params);
		}
		if (offset != null) {
			remoteRequestBuilder.addToParameters("offset", offset.toString());
		}

		if (limit != null) {
			remoteRequestBuilder.addToParameters("limit", limit.toString());
		}
		RemoteRequest remoteRequest = remoteRequestBuilder
				.createRemoteRequest();

		return com.anypresence.sdk.APObject.query(remoteRequest, offset, limit,
				CapitalMarketsContentService.class);
	}

	/**
	 * Queries for <tt>CapitalMarketsContentService</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<CapitalMarketsContentService> query(String scope,
			Map<String, String> params) throws RemoteRequestException {
		return query(scope, params, null, null);
	}

	/**
	 * Queries for <tt>CapitalMarketsContentService</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<CapitalMarketsContentService> queryInBackground(
			final String scope, Map<String, String> params,
			IAPFutureCallback<List<CapitalMarketsContentService>> futureCallback) {

		return queryInBackground(scope, params, null, null, futureCallback);

	}

	/**
	 * Queries for <tt>CapitalMarketsContentService</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * CapitalMarketsContentService.queryInBackground("all", new APCallback<List<CapitalMarketsContentService>>() {
	 *     
	 *     public void finished(List<CapitalMarketsContentService> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param futureCallback the callback that handles the result of the request.
	 * @return list of cached <tt>CapitalMarketsContentService</tt> objects.
	 */
	public static List<CapitalMarketsContentService> queryInBackground(
			String scope,
			IAPFutureCallback<List<CapitalMarketsContentService>> futureCallback) {

		return queryInBackground(scope, null, null, null, futureCallback);

	}

	/**
	 * Queries for <tt>CapitalMarketsContentService</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * CapitalMarketsContentService.queryInBackground("all", 0, 25, new APCallback<List<CapitalMarketsContentService>>() {
	 *     
	 *     public void finished(List<CapitalMarketsContentService> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @param futureCallback the callback that handles the result of the request.
	 * @return list of cached <tt>CapitalMarketsContentService</tt> objects.
	 */
	public static List<CapitalMarketsContentService> queryInBackground(
			String scope, Integer offset, Integer limit,
			IAPFutureCallback<List<CapitalMarketsContentService>> futureCallback) {

		return queryInBackground(scope, null, offset, limit, futureCallback);

	}

	/**
	 * Queries for <tt>CapitalMarketsContentService</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * params.put("name", "test");
	 * CapitalMarketsContentService.queryInBackground("all", params, 0, 25, new APCallback<List<CapitalMarketsContentService>>() {
	 *     
	 *     public void finished(List<CapitalMarketsContentService> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @param futureCallback the callback that handles the result of the request.
	 */
	public static List<CapitalMarketsContentService> queryInBackground(
			final String scope, Map<String, String> params, Integer offset,
			Integer limit,
			IAPFutureCallback<List<CapitalMarketsContentService>> futureCallback) {

		RemoteRequest.RemoteRequestBuilder remoteRequestBuilder = RemoteRailsConfig
				.getRouterAdapterByClassOrUseDefaultAdapter(
						CapitalMarketsContentService.class)
				.createRemoteRequestBuilder(scope, RequestMethod.GET,
						CapitalMarketsContentService.class);
		remoteRequestBuilder.query(scope);
		if (params != null) {
			remoteRequestBuilder.addToParameters(params);
			remoteRequestBuilder.context(params);
		}

		if (offset != null) {
			remoteRequestBuilder.addToParameters("offset", offset.toString());
		}

		if (limit != null) {
			remoteRequestBuilder.addToParameters("limit", limit.toString());
		}

		RemoteRequest remoteRequest = remoteRequestBuilder
				.createRemoteRequest();

		if (DEBUG_MODE) {
			System.out.println(ReflectionToStringBuilder
					.reflectionToString(remoteRequest));
		}

		return com.anypresence.sdk.APObject.queryInBackground(remoteRequest,
				CapitalMarketsContentService.class, futureCallback);

	}

	/**
	 * Performs aggregate query with the provided <tt>scope</tt>.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static String aggregateQuery(String scope, Map<String, String> params)
			throws RemoteRequestException {
		return com.anypresence.sdk.APObject.aggregateQuery(scope, params,
				CapitalMarketsContentService.class);
	}

	/**
	 * Performs aggregate query with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * CapitalMarketsContentService.aggregateQueryInBackground("count", params, new APCallback<String>() {
	 *     
	 *     public void finished(String count, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "success");
	 *         } else {
	 *             Log.e(TAG, "failure", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param futureCallback the callback that handles the result of the request.
	 */
	public static void aggregateQueryInBackground(String scope,
			Map<String, String> params, IAPFutureCallback<String> futureCallback) {
		com.anypresence.sdk.APObject.aggregateQueryInBackground(scope, params,
				CapitalMarketsContentService.class, futureCallback);
	}

	/**
	 * Deletes all data in cache for <tt>CapitalMarketsContentService</tt>.
	 */
	public static void deleteAllInCache() {
		com.anypresence.sdk.APObject.deleteAllInCache();
	}

	/**
	 * Loads all <tt>CapitalMarketsContentService</tt> objects in local cache.
	 *
	 * @return list of <tt>CapitalMarketsContentService</tt>
	 */
	public static List<CapitalMarketsContentService> loadAllInCache() {
		return com.anypresence.sdk.APSDKSetup.getCacheManager().loadAllInCache(
				CapitalMarketsContentService.class);
	}

	/**
	 * Loads <tt>CapitalMarketsContentService</tt> objects in local cache.
	 *
	 * @param offset the offset
	 * @param limit the limit
	 * @return list of <tt>CapitalMarketsContentService</tt>
	 */
	public static List<CapitalMarketsContentService> loadInCache(
			Integer offset, Integer limit) {
		return null;
	}

	/**
	 * Updates object in cache if the object id is not null.
	 */
	public void updateInCache() {
		com.anypresence.sdk.APSDKSetup.getCacheManager().updateInCache(
				CapitalMarketsContentService.class, this);
	}

	/**
	 * Saves object into cache.
	 */
	public void saveInCache() {
		saveInCache(null);
	}

	/**
	 * Saves object into cache with provided scope.
	 */
	public void saveInCache(String scope) {
		com.anypresence.sdk.APSDKSetup.getCacheManager().saveInCache(
				CapitalMarketsContentService.class, this, scope);
	}

	/**
	 * Saves object into cache with provided <tt>APCachedRequest</tt>.
	 */
	public void saveInCacheWithRequest(IAPCachedRequest request) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.saveInCacheWithRequest(CapitalMarketsContentService.class,
						this, request);
	}

	/**
	 * Deletes all <tt>CapitalMarketsContentService</tt> objects in cache that has
	 * this instance's object id.
	 */
	public void deleteInCache() {
		if (this.getObjectId() != null) {
			deleteAllInCacheWithObjectIdPredicate(this.getObjectId()
					.stringify());
		} else {
			log.info("Cannot delete in local cache since the objectId is not set");
		}
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache with provided remote object id.
	 * 
	 * @param objectId the remote object id.
	 * @return a list of <tt>CapitalMarketsContentService</tt>;
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithObjectIdPredicate(
			String objectId) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithObjectIdPredicate(
						CapitalMarketsContentService.class, objectId);
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache by searching for requests matching 
	 * the exact scope and parameters provided.
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * params.put("name", "test");
	 * CapitalMarketsContentService.queryInBackground("all", params, new APCallback<List<CapitalMarketsContentService>>() {
	 *     
	 *     public void finished(List<CapitalMarketsContentService> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * // Get the cached objects from the above query.
	 * CapitalMarketsContentService.fetchInCacheWithParameterPredicate("all", params);
	 * }
	 *
	 * </pre>
	 * 
	 * @param scope the scope 
	 * @param params the parameter
	 * @return a list of <tt>CapitalMarketsContentService</tt>;
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithParameterPredicate(
			String scope, Map<String, String> params) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithParameterPredicate(
						CapitalMarketsContentService.class, scope, params);
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @return a list of <tt>CapitalMarketsContentService</tt>;
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithScopePredicate(
			String scope, Integer offset, Integer limit) {
		return fetchInCacheWithScopePredicate(scope, null, offset, limit);
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @return a list of <tt>CapitalMarketsContentService</tt>;
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithScopePredicate(
			String scope) {
		return fetchInCacheWithScopePredicate(scope, null, null);
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache with provided scope.
	 * 
	 * @param scope the scope
	 * @param params the parameters
	 * @return a list of <tt>CapitalMarketsContentService</tt>;
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithScopePredicate(
			String scope, Map<String, String> params) {
		return fetchInCacheWithScopePredicate(scope, params, null, null);
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @param params the parameters
	 * @param offset the offset
	 * @param limit the limit
	 * @return a list of <tt>CapitalMarketsContentService</tt>;
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithScopePredicate(
			String scope, Map<String, String> params, Integer offset,
			Integer limit) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithScopePredicate(
						CapitalMarketsContentService.class, scope, params,
						offset, limit);
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache with provided request.
	 * 
	 * @param request instance of <tt>com.anypresence.anypresence_inc.citi_mobile_challenge.dao.APCachedRequest</tt>.
	 * @return a list of <tt>CapitalMarketsContentService</tt>;
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithAPCachedRequestPredicate(
			IAPCachedRequest request) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithAPCachedRequestPredicate(
						CapitalMarketsContentService.class, request);
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache with latest request.
	 * 
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @return a list of <tt>CapitalMarketsContentService</tt>;
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithLatestAPCachedRequestPredicate(
			String scope, Map<String, String> params, Integer offset,
			Integer limit) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithLatestAPCachedRequestPredicate(
						CapitalMarketsContentService.class, scope, params,
						offset, limit);
	}

	/**
	 * Fetches <tt>CapitalMarketsContentService</tt> from cache with predicates.
	 *
	 * @see com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CapitalMarketsContentServiceDao.Properties
	 *
	 * @param predicates hash of predicates
	 * @return a list of <tt>CapitalMarketsContentService</tt>
	 */
	public static List<CapitalMarketsContentService> fetchInCacheWithPredicates(
			Map<String, String> predicates) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithPredicates(CapitalMarketsContentService.class,
						predicates);
	}

	/**
	 * Deletes <tt>CapitalMarketsContentService</tt> from cache matching <tt>objectId</tt>.
	 * 
	 * @param objectId the remote object id.
	 */
	public static void deleteAllInCacheWithObjectIdPredicate(String objectId) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.deleteAllInCacheWithObjectIdPredicate(
						CapitalMarketsContentService.class, objectId);
	}

	/**
	 * Deletes <tt>CapitalMarketsContentService</tt> from cache matching <tt>scope</tt>.
	 * 
	 * @param scope the scope.
	 */
	public static void deleteAllInCacheWithScopePredicate(String scope) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.deleteAllInCacheWithScopePredicate(
						CapitalMarketsContentService.class, scope);
	}

	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 37).

		append(alertDate).

		append(allAttachments).

		append(analystId).

		append(analystType).

		append(assetClass).

		append(attachmentId).

		append(authorDetails).

		append(authorId).

		append(authorName).

		append(authors).

		append(company).

		append(contentServicesType).

		append(contentType).

		append(contentUrl).

		append(dateString).

		append(documentUrl).

		append(encryptedId).

		append(fileLink).

		append(fileName).

		append(fileType).

		append(formatedPubDate).

		append(formattedDateStr).

		append(headline).

		append(hitCount).

		append(htmlEscapedTitle).

		append(image).

		append(imageGroup).

		append(kv).

		append(medialUrlIos).

		append(mediaUrlAndroid).

		append(menuCode).

		append(miliseconds).

		append(oboFirstName).

		append(oboLastName).

		append(oboPreferredName).

		append(pageCount).

		append(productList).

		append(productType).

		append(pubDate).

		append(pubId).

		append(pubKey).

		append(refArticleTitle).

		append(refArticleUrl).

		append(region).

		append(resdataUrl).

		append(rnum).

		append(scale).

		append(sectors).

		append(source).

		append(summary).

		append(synopsis).

		append(template).

		append(themeId).

		append(tickers).

		append(title).

		append(totalCount).

		append(videoType).

		append(videoUrl).

		append(getObjectId()).toHashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if ((obj == null) || (obj.getClass() != this.getClass()))
			return false;
		CapitalMarketsContentService other = (CapitalMarketsContentService) obj;
		return new EqualsBuilder().

		append(alertDate, other.alertDate).

		append(allAttachments, other.allAttachments).

		append(analystId, other.analystId).

		append(analystType, other.analystType).

		append(assetClass, other.assetClass).

		append(attachmentId, other.attachmentId).

		append(authorDetails, other.authorDetails).

		append(authorId, other.authorId).

		append(authorName, other.authorName).

		append(authors, other.authors).

		append(company, other.company).

		append(contentServicesType, other.contentServicesType).

		append(contentType, other.contentType).

		append(contentUrl, other.contentUrl).

		append(dateString, other.dateString).

		append(documentUrl, other.documentUrl).

		append(encryptedId, other.encryptedId).

		append(fileLink, other.fileLink).

		append(fileName, other.fileName).

		append(fileType, other.fileType).

		append(formatedPubDate, other.formatedPubDate).

		append(formattedDateStr, other.formattedDateStr).

		append(headline, other.headline).

		append(hitCount, other.hitCount).

		append(htmlEscapedTitle, other.htmlEscapedTitle).

		append(image, other.image).

		append(imageGroup, other.imageGroup).

		append(kv, other.kv).

		append(medialUrlIos, other.medialUrlIos).

		append(mediaUrlAndroid, other.mediaUrlAndroid).

		append(menuCode, other.menuCode).

		append(miliseconds, other.miliseconds).

		append(oboFirstName, other.oboFirstName).

		append(oboLastName, other.oboLastName).

		append(oboPreferredName, other.oboPreferredName).

		append(pageCount, other.pageCount).

		append(productList, other.productList).

		append(productType, other.productType).

		append(pubDate, other.pubDate).

		append(pubId, other.pubId).

		append(pubKey, other.pubKey).

		append(refArticleTitle, other.refArticleTitle).

		append(refArticleUrl, other.refArticleUrl).

		append(region, other.region).

		append(resdataUrl, other.resdataUrl).

		append(rnum, other.rnum).

		append(scale, other.scale).

		append(sectors, other.sectors).

		append(source, other.source).

		append(summary, other.summary).

		append(synopsis, other.synopsis).

		append(template, other.template).

		append(themeId, other.themeId).

		append(tickers, other.tickers).

		append(title, other.title).

		append(totalCount, other.totalCount).

		append(videoType, other.videoType).

		append(videoUrl, other.videoUrl).

		append(getObjectId(), other.getObjectId()).isEquals();
	}

	// Backend on Device
	public static String MAPPING = "CapitalMarketsContentService";
	public static String BASE_URL = "";
	public static String PORT = "";
	public static String PREFIX = "";
	public static String QUERY_PREFIX = "";
	public static boolean USE_SUFFIX = false;

	/**
	 * Deprecated: Pulled up into HttpAdapter
	 */
	@Override
	@Deprecated
	public String requestMapping() {
		return MAPPING;
	}

	/**
	 * Deprecated: Pulled up into HttpAdapter
	 */
	@Override
	@Deprecated
	public String requestBaseUrl() throws MalformedURLException {
		return BASE_URL;
	}

	/**
	 * Deprecated: Pulled up into HttpAdapter
	 */
	@Override
	@Deprecated
	public String requestPrefix() {
		return PREFIX;
	}

	/**
	 * Deprecated: Pulled up into HttpAdapter
	 */
	@Deprecated
	public static String requestQueryPrefix() {
		if (QUERY_PREFIX.isEmpty()) {
			return "%s";
		}
		return QUERY_PREFIX + "[%s]";
	}

	@Override
	public String serialize() {
		String bodyFormat = getSerializationBodyFormat();
		SerializerBuilder builder = null;

		String recordSelector = HttpAdapter.createResponseWrangling(this)
				.getRecordSelector();
		if (XML.equals(bodyFormat)) {
			builder = new XmlSerializer.XmlSerializerBuilder(recordSelector);
		} else if (JSON.equals(bodyFormat)) {
			builder = new JsonSerializer.JsonSerializerBuilder(recordSelector);
		} else if (FORM_ENCODED.equals(bodyFormat)) {
			builder = new FormEncodedSerializer.FormEncodedSerializerBuilder(
					recordSelector);
		}

		final RouterAdapter routerAdapter = RemoteRailsConfig
				.getRouterAdapterByClass(this.getClass());
		if (builder != null && routerAdapter != null) {

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("id"), "id");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("alert_date"), "alert_date");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("all_attachments"),
					"all_attachments");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("analyst_id"), "analyst_id");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("analyst_type"), "analyst_type");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("asset_class"), "asset_class");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("attachment_id"),
					"attachment_id");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("author_details"),
					"author_details");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("author_id"), "author_id");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("author_name"), "author_name");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("authors"), "authors");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("company"), "company");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("content_services_type"),
					"content_services_type");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("content_type"), "content_type");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("content_url"), "content_url");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("date_string"), "date_string");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("document_url"), "document_url");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("encrypted_id"), "encrypted_id");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("file_link"), "file_link");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("file_name"), "file_name");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("file_type"), "file_type");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("formated_pub_date"),
					"formated_pub_date");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("formatted_date_str"),
					"formatted_date_str");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("headline"), "headline");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("hit_count"), "hit_count");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("html_escaped_title"),
					"html_escaped_title");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("image"), "image");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("image_group"), "image_group");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("kv"), "kv");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("medial_url_ios"),
					"medial_url_ios");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("media_url_android"),
					"media_url_android");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("menu_code"), "menu_code");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("miliseconds"), "miliseconds");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("obo_first_name"),
					"obo_first_name");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("obo_last_name"),
					"obo_last_name");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("obo_preferred_name"),
					"obo_preferred_name");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("page_count"), "page_count");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("product_list"), "product_list");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("product_type"), "product_type");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("pub_date"), "pub_date");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("pub_id"), "pub_id");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("pub_key"), "pub_key");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("ref_article_title"),
					"ref_article_title");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("ref_article_url"),
					"ref_article_url");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("region"), "region");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("resdata_url"), "resdata_url");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("rnum"), "rnum");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("scale"), "scale");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("sectors"), "sectors");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("source"), "source");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("summary"), "summary");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("synopsis"), "synopsis");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("template"), "template");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("theme_id"), "theme_id");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("tickers"), "tickers");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("title"), "title");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("total_count"), "total_count");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("video_type"), "video_type");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("video_url"), "video_url");

			return builder.create().serialize(this);
		} else {
			return super.serialize();
		}
	}

	@Override
	public ArrayList<RemoteObject> deserializeArray(String queryScope,
			String input) {
		String bodyFormat = getDeserializationBodyFormat();
		if (XML.equals(bodyFormat)) {
			return deserializeArrayAsXml(queryScope, input);
		} else if (JSON.equals(bodyFormat)) {
			return deserializeArrayAsJson(queryScope, input);
		} else {
			return deserializeArrayAsJson(queryScope, input);
		}
	}

	@Override
	public ArrayList<RemoteObject> deserializeArray(String input) {
		return deserializeArray("", input);
	}

	private ArrayList<RemoteObject> deserializeArrayAsXml(String queryScope,
			String input) {
		ArrayList<RemoteObject> objects = new ArrayList<RemoteObject>();

		XmlParser parser = new XmlParser(input);
		XmlElement parent = ((XmlElement) parser.parse(HttpAdapter
				.createResponseWrangling(queryScope, this)
				.getCollectionSelector(), XmlElement.class)).getParent();
		for (int i = 0; i < parent.getChildCount(); i++) {
			objects.add(deserialize(queryScope, new XmlParser(parent.get(i))));
		}

		return objects;
	}

	private ArrayList<RemoteObject> deserializeArrayAsJson(String queryScope,
			String input) {
		ArrayList<RemoteObject> objects = new ArrayList<RemoteObject>();

		JsonParser parser = new JsonParser(input);
		JsonArray parent = ((JsonElement) parser.parse(HttpAdapter
				.createResponseWrangling(queryScope, this)
				.getCollectionSelector(), JsonElement.class)).getAsJsonArray();
		for (int i = 0; i < parent.size(); i++) {
			objects.add(deserialize(queryScope, new JsonParser(parent.get(i))));
		}

		return objects;
	}

	@Override
	public String getDeserializationBodyFormat() {
		final HttpAdapter routerAdapter = (HttpAdapter) RemoteRailsConfig
				.getRouterAdapterByClass(this.getClass());
		if (routerAdapter == null
				|| routerAdapter.getConfigurationsAsConfiguration("GET") == null) {
			return RemoteRailsConfig.getInstance().getDefaultRouterAdapter()
					.getSuffix();
		}
		return routerAdapter.getConfigurationsAsConfiguration("GET")
				.getBodyFormat();
	}

	@Override
	public String getSerializationBodyFormat() {
		final HttpAdapter routerAdapter = (HttpAdapter) RemoteRailsConfig
				.getRouterAdapterByClass(this.getClass());
		if (routerAdapter == null
				|| routerAdapter.getConfigurationsAsConfiguration("GET") == null) {
			return RemoteRailsConfig.getInstance().getDefaultRouterAdapter()
					.getSuffix();
		}
		return routerAdapter.getConfigurationsAsConfiguration("POST")
				.getBodyFormat();
	}

	@Override
	public RemoteObject deserialize(String queryScope, String input) {
		String bodyFormat = getDeserializationBodyFormat();
		// TODO parse role if auth object
		Parser parser = null;
		if (XML.equals(bodyFormat)) {
			parser = createXmlParser(queryScope, input);
		} else if (JSON.equals(bodyFormat)) {
			parser = createJsonParser(queryScope, input);
		} else {
			parser = createJsonParser(queryScope, input);
		}

		return deserialize(queryScope, parser);
	}

	@Override
	public RemoteObject deserialize(String input) {
		return deserialize("", input);
	}

	private Parser createXmlParser(String queryScope, String input) {
		Parser parser = new XmlParser(input);
		if (!HttpAdapter.createResponseWrangling(queryScope, this)
				.getRecordSelector().isEmpty()) {
			((XmlParser) parser).setRootElement(parser.parse(HttpAdapter
					.createResponseWrangling(queryScope, this)
					.getRecordSelector(), XmlElement.class));
		}
		return parser;
	}

	private Parser createJsonParser(String queryScope, String input) {
		Parser parser = new JsonParser(input);
		if (!HttpAdapter.createResponseWrangling(queryScope, this)
				.getRecordSelector().isEmpty()) {
			((JsonParser) parser).setRootElement(parser.parse(HttpAdapter
					.createResponseWrangling(queryScope, this)
					.getRecordSelector(), JsonElement.class));
		}
		return parser;
	}

	public RemoteObject deserialize(String queryScope, Parser parser) {
		final RouterAdapter routerAdapter = RemoteRailsConfig
				.getRouterAdapterByClass(this.getClass());
		CapitalMarketsContentService object = new CapitalMarketsContentService();
		HttpAdapter.Configuration configuration = null;
		if ((routerAdapter != null) && (routerAdapter instanceof HttpAdapter)) {
			if (queryScope != null && !queryScope.isEmpty()) {
				configuration = ((HttpAdapter) routerAdapter)
						.getScopedConfigurationsByNameAsConfiguration(queryScope);
			} else {
				configuration = ((HttpAdapter) routerAdapter)
						.getConfigurationsAsConfiguration("GET");
			}
		}
		if (configuration != null) {

			try {

				object.id = parser.parse(
						configuration.getResponseRemoteFieldName("id"),
						ObjectId.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.alertDate = parser.parse(
						configuration.getResponseRemoteFieldName("alert_date"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.allAttachments = parser.parse(configuration
						.getResponseRemoteFieldName("all_attachments"),
						ArrayList.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.analystId = parser.parse(
						configuration.getResponseRemoteFieldName("analyst_id"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.analystType = parser.parse(configuration
						.getResponseRemoteFieldName("analyst_type"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.assetClass = parser
						.parse(configuration
								.getResponseRemoteFieldName("asset_class"),
								String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.attachmentId = parser.parse(configuration
						.getResponseRemoteFieldName("attachment_id"),
						Integer.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.authorDetails = parser.parse(configuration
						.getResponseRemoteFieldName("author_details"),
						ArrayList.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.authorId = parser.parse(
						configuration.getResponseRemoteFieldName("author_id"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.authorName = parser
						.parse(configuration
								.getResponseRemoteFieldName("author_name"),
								String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.authors = parser.parse(
						configuration.getResponseRemoteFieldName("authors"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.company = parser.parse(
						configuration.getResponseRemoteFieldName("company"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.contentServicesType = parser.parse(configuration
						.getResponseRemoteFieldName("content_services_type"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.contentType = parser.parse(configuration
						.getResponseRemoteFieldName("content_type"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.contentUrl = parser
						.parse(configuration
								.getResponseRemoteFieldName("content_url"),
								String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.dateString = parser
						.parse(configuration
								.getResponseRemoteFieldName("date_string"),
								String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.documentUrl = parser.parse(configuration
						.getResponseRemoteFieldName("document_url"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.encryptedId = parser.parse(configuration
						.getResponseRemoteFieldName("encrypted_id"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.fileLink = parser.parse(
						configuration.getResponseRemoteFieldName("file_link"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.fileName = parser.parse(
						configuration.getResponseRemoteFieldName("file_name"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.fileType = parser.parse(
						configuration.getResponseRemoteFieldName("file_type"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.formatedPubDate = parser.parse(configuration
						.getResponseRemoteFieldName("formated_pub_date"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.formattedDateStr = parser.parse(configuration
						.getResponseRemoteFieldName("formatted_date_str"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.headline = parser.parse(
						configuration.getResponseRemoteFieldName("headline"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.hitCount = parser.parse(
						configuration.getResponseRemoteFieldName("hit_count"),
						Integer.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.htmlEscapedTitle = parser.parse(configuration
						.getResponseRemoteFieldName("html_escaped_title"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.image = parser.parse(
						configuration.getResponseRemoteFieldName("image"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.imageGroup = parser
						.parse(configuration
								.getResponseRemoteFieldName("image_group"),
								ArrayList.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.kv = parser.parse(
						configuration.getResponseRemoteFieldName("kv"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.medialUrlIos = parser.parse(configuration
						.getResponseRemoteFieldName("medial_url_ios"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.mediaUrlAndroid = parser.parse(configuration
						.getResponseRemoteFieldName("media_url_android"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.menuCode = parser.parse(
						configuration.getResponseRemoteFieldName("menu_code"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.miliseconds = parser
						.parse(configuration
								.getResponseRemoteFieldName("miliseconds"),
								String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.oboFirstName = parser.parse(configuration
						.getResponseRemoteFieldName("obo_first_name"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.oboLastName = parser.parse(configuration
						.getResponseRemoteFieldName("obo_last_name"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.oboPreferredName = parser.parse(configuration
						.getResponseRemoteFieldName("obo_preferred_name"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.pageCount = parser.parse(
						configuration.getResponseRemoteFieldName("page_count"),
						Integer.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.productList = parser.parse(configuration
						.getResponseRemoteFieldName("product_list"),
						ArrayList.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.productType = parser.parse(configuration
						.getResponseRemoteFieldName("product_type"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.pubDate = parser.parse(
						configuration.getResponseRemoteFieldName("pub_date"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.pubId = parser.parse(
						configuration.getResponseRemoteFieldName("pub_id"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.pubKey = parser.parse(
						configuration.getResponseRemoteFieldName("pub_key"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.refArticleTitle = parser.parse(configuration
						.getResponseRemoteFieldName("ref_article_title"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.refArticleUrl = parser.parse(configuration
						.getResponseRemoteFieldName("ref_article_url"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.region = parser.parse(
						configuration.getResponseRemoteFieldName("region"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.resdataUrl = parser
						.parse(configuration
								.getResponseRemoteFieldName("resdata_url"),
								String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.rnum = parser.parse(
						configuration.getResponseRemoteFieldName("rnum"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.scale = parser.parse(
						configuration.getResponseRemoteFieldName("scale"),
						ArrayList.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.sectors = parser.parse(
						configuration.getResponseRemoteFieldName("sectors"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.source = parser.parse(
						configuration.getResponseRemoteFieldName("source"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.summary = parser.parse(
						configuration.getResponseRemoteFieldName("summary"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.synopsis = parser.parse(
						configuration.getResponseRemoteFieldName("synopsis"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.template = parser.parse(
						configuration.getResponseRemoteFieldName("template"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.themeId = parser.parse(
						configuration.getResponseRemoteFieldName("theme_id"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.tickers = parser.parse(
						configuration.getResponseRemoteFieldName("tickers"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.title = parser.parse(
						configuration.getResponseRemoteFieldName("title"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.totalCount = parser
						.parse(configuration
								.getResponseRemoteFieldName("total_count"),
								Integer.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.videoType = parser.parse(
						configuration.getResponseRemoteFieldName("video_type"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.videoUrl = parser.parse(
						configuration.getResponseRemoteFieldName("video_url"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

		} else {
			// Default to use gson deserializer
			String json = "";
			if (parser instanceof JsonParser) {
				json = ((JsonParser) parser).getRootElement().toString();
			}

			object = (CapitalMarketsContentService) Utilities
					.transformJsonToObject(json, this.getClass());
		}

		return object;
	}

}
