package com.anypresence.sdk.citi_mobile_challenge.models;

//
//  CorporatePaymentsCrossBorderFxPayment.java
//  
//
//  Generated by AnyPresence, Inc on 2015-09-15
//  Copyright (c) 2015. All rights reserved.
//

import com.google.common.util.concurrent.*;
import java.util.*;
import java.util.concurrent.Callable;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import java.lang.reflect.Field;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import com.anypresence.rails_droid.*;
import com.anypresence.rails_droid.http.RequestMethod;
import com.anypresence.sdk.acl.*;
import com.anypresence.sdk.callbacks.*;
import com.anypresence.sdk.query.*;
import com.anypresence.sdk.config.Config;
import com.anypresence.sdk.acl.UnauthorizedException;
import com.anypresence.sdk.*;
import com.anypresence.sdk.cache.*;
import com.anypresence.sdk.cache.greendao.*;
import com.anypresence.sdk.parse.*;
import java.net.MalformedURLException;
import com.anypresence.rails_droid.RemoteRailsConfig;
import com.anypresence.rails_droid.http.RouterAdapter;
import com.anypresence.sdk.http.HttpAdapter;
import com.anypresence.sdk.Utility;

import com.jayway.jsonpath.PathNotFoundException;

import static com.anypresence.sdk.config.Config.DEBUG_MODE;
import static com.anypresence.sdk.http.HttpAdapter.JSON;
import static com.anypresence.sdk.http.HttpAdapter.XML;
import static com.anypresence.sdk.http.HttpAdapter.FORM_ENCODED;

/**
 * This class represents a model constructed from the Designer.
 *
 * Fields that are to be serialized into json must be annotated with <tt>@Expose</tt>.
 */
public final class CorporatePaymentsCrossBorderFxPayment
		extends
			com.anypresence.sdk.APObject {
	private static final long serialVersionUID = 1L;

	private static final Log log = LogFactory
			.getLog(CorporatePaymentsCrossBorderFxPayment.class);

	private static final String TAG = "CorporatePaymentsCrossBorderFxPayment";

	/**
	 *  Scope names for CorporatePaymentsCrossBorderFxPayment.
	 */
	public static class Scopes {

		public final static String ALL = "all";

		public final static String EXACT_MATCH = "exact_match";

		public final static String COUNT = "count";

		public final static String COUNT_EXACT_MATCH = "count_exact_match";

		public final static String FX_PAYMENTS = "fx_payments";

	}

	private static QueryScope getScope(String scope) {
		if (getQueryScopes().get(scope) == null) {
			return getQueryScopes().get("all");
		}

		return getQueryScopes().get(scope);
	}

	@SerializedName("id")
	@Expose
	private ObjectId id;
	// Getter/Setter for the id
	@Override
	public ObjectId getObjectId() {
		return id;
	}

	@Override
	public void setObjectId(ObjectId id) {
		this.id = id;
	}

	public ObjectId getId() {
		return getObjectId();
	}

	public void setId(ObjectId id) {
		setObjectId(id);
	}

	public void setIdAsString(String id) {
		setObjectId(new ObjectId(id));
	}

	// Getters/setters for field definitions.

	@SerializedName("beneficiary_account")
	@Expose
	private String beneficiaryAccount;

	public String getBeneficiaryAccount() {
		return beneficiaryAccount;
	}

	public void setBeneficiaryAccount(String beneficiaryAccount) {
		this.beneficiaryAccount = beneficiaryAccount;
	}

	@SerializedName("beneficiary_address")
	@Expose
	private String beneficiaryAddress;

	public String getBeneficiaryAddress() {
		return beneficiaryAddress;
	}

	public void setBeneficiaryAddress(String beneficiaryAddress) {
		this.beneficiaryAddress = beneficiaryAddress;
	}

	@SerializedName("beneficiary_bank")
	@Expose
	private String beneficiaryBank;

	public String getBeneficiaryBank() {
		return beneficiaryBank;
	}

	public void setBeneficiaryBank(String beneficiaryBank) {
		this.beneficiaryBank = beneficiaryBank;
	}

	@SerializedName("beneficiary_name")
	@Expose
	private String beneficiaryName;

	public String getBeneficiaryName() {
		return beneficiaryName;
	}

	public void setBeneficiaryName(String beneficiaryName) {
		this.beneficiaryName = beneficiaryName;
	}

	@SerializedName("citi_ref")
	@Expose
	private String citiRef;

	public String getCitiRef() {
		return citiRef;
	}

	public void setCitiRef(String citiRef) {
		this.citiRef = citiRef;
	}

	@SerializedName("created_by")
	@Expose
	private String createdBy;

	public String getCreatedBy() {
		return createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@SerializedName("created_on")
	@Expose
	private String createdOn;

	public String getCreatedOn() {
		return createdOn;
	}

	public void setCreatedOn(String createdOn) {
		this.createdOn = createdOn;
	}

	@SerializedName("customer_txn_ref")
	@Expose
	private String customerTxnRef;

	public String getCustomerTxnRef() {
		return customerTxnRef;
	}

	public void setCustomerTxnRef(String customerTxnRef) {
		this.customerTxnRef = customerTxnRef;
	}

	@SerializedName("debtor_account")
	@Expose
	private String debtorAccount;

	public String getDebtorAccount() {
		return debtorAccount;
	}

	public void setDebtorAccount(String debtorAccount) {
		this.debtorAccount = debtorAccount;
	}

	@SerializedName("debtor_address")
	@Expose
	private String debtorAddress;

	public String getDebtorAddress() {
		return debtorAddress;
	}

	public void setDebtorAddress(String debtorAddress) {
		this.debtorAddress = debtorAddress;
	}

	@SerializedName("debtor_name")
	@Expose
	private String debtorName;

	public String getDebtorName() {
		return debtorName;
	}

	public void setDebtorName(String debtorName) {
		this.debtorName = debtorName;
	}

	@SerializedName("from_amount")
	@Expose
	private Float fromAmount;

	public Float getFromAmount() {
		return fromAmount;
	}

	public void setFromAmount(Float fromAmount) {
		this.fromAmount = fromAmount;
	}

	@SerializedName("from_currency")
	@Expose
	private String fromCurrency;

	public String getFromCurrency() {
		return fromCurrency;
	}

	public void setFromCurrency(String fromCurrency) {
		this.fromCurrency = fromCurrency;
	}

	@SerializedName("payment_details")
	@Expose
	private String paymentDetails;

	public String getPaymentDetails() {
		return paymentDetails;
	}

	public void setPaymentDetails(String paymentDetails) {
		this.paymentDetails = paymentDetails;
	}

	@SerializedName("rate_reference")
	@Expose
	private String rateReference;

	public String getRateReference() {
		return rateReference;
	}

	public void setRateReference(String rateReference) {
		this.rateReference = rateReference;
	}

	@SerializedName("status")
	@Expose
	private String status;

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@SerializedName("to_amount")
	@Expose
	private Float toAmount;

	public Float getToAmount() {
		return toAmount;
	}

	public void setToAmount(Float toAmount) {
		this.toAmount = toAmount;
	}

	@SerializedName("to_currency")
	@Expose
	private String toCurrency;

	public String getToCurrency() {
		return toCurrency;
	}

	public void setToCurrency(String toCurrency) {
		this.toCurrency = toCurrency;
	}

	@SerializedName("value_date")
	@Expose
	private String valueDate;

	public String getValueDate() {
		return valueDate;
	}

	public void setValueDate(String valueDate) {
		this.valueDate = valueDate;
	}

	/**
	 * Copies provided object.
	 */
	public static final CorporatePaymentsCrossBorderFxPayment copy(
			CorporatePaymentsCrossBorderFxPayment orig) {
		final CorporatePaymentsCrossBorderFxPayment newObject = new CorporatePaymentsCrossBorderFxPayment();

		if (orig.getId() != null)
			newObject.setId(new ObjectId(orig.getId()));

		if (orig.getBeneficiaryAccount() != null)
			newObject.setBeneficiaryAccount(new String(orig
					.getBeneficiaryAccount()));

		if (orig.getBeneficiaryAddress() != null)
			newObject.setBeneficiaryAddress(new String(orig
					.getBeneficiaryAddress()));

		if (orig.getBeneficiaryBank() != null)
			newObject.setBeneficiaryBank(new String(orig.getBeneficiaryBank()));

		if (orig.getBeneficiaryName() != null)
			newObject.setBeneficiaryName(new String(orig.getBeneficiaryName()));

		if (orig.getCitiRef() != null)
			newObject.setCitiRef(new String(orig.getCitiRef()));

		if (orig.getCreatedBy() != null)
			newObject.setCreatedBy(new String(orig.getCreatedBy()));

		if (orig.getCreatedOn() != null)
			newObject.setCreatedOn(new String(orig.getCreatedOn()));

		if (orig.getCustomerTxnRef() != null)
			newObject.setCustomerTxnRef(new String(orig.getCustomerTxnRef()));

		if (orig.getDebtorAccount() != null)
			newObject.setDebtorAccount(new String(orig.getDebtorAccount()));

		if (orig.getDebtorAddress() != null)
			newObject.setDebtorAddress(new String(orig.getDebtorAddress()));

		if (orig.getDebtorName() != null)
			newObject.setDebtorName(new String(orig.getDebtorName()));

		if (orig.getFromAmount() != null)
			newObject.setFromAmount(new Float(orig.getFromAmount()));

		if (orig.getFromCurrency() != null)
			newObject.setFromCurrency(new String(orig.getFromCurrency()));

		if (orig.getPaymentDetails() != null)
			newObject.setPaymentDetails(new String(orig.getPaymentDetails()));

		if (orig.getRateReference() != null)
			newObject.setRateReference(new String(orig.getRateReference()));

		if (orig.getStatus() != null)
			newObject.setStatus(new String(orig.getStatus()));

		if (orig.getToAmount() != null)
			newObject.setToAmount(new Float(orig.getToAmount()));

		if (orig.getToCurrency() != null)
			newObject.setToCurrency(new String(orig.getToCurrency()));

		if (orig.getValueDate() != null)
			newObject.setValueDate(new String(orig.getValueDate()));

		return newObject;
	}

	// Query scopes
	private static Map<String, QueryScope> queryScopes = new HashMap<String, QueryScope>();

	public void setQueryScopes(Map<String, QueryScope> queryScopes) {
		this.queryScopes = queryScopes;
	}

	public static Map<String, QueryScope> getQueryScopes() {
		return queryScopes;
	}

	static {

		QueryScope queryScopeall = new QueryScope();
		queryScopeall.setName("all");

		queryScopes.put(queryScopeall.getName(), queryScopeall);

		QueryScope queryScopeexact_match = new QueryScope();
		queryScopeexact_match.setName("exact_match");

		queryScopes.put(queryScopeexact_match.getName(), queryScopeexact_match);

		QueryScope queryScopecount = new QueryScope();
		queryScopecount.setName("count");

		queryScopes.put(queryScopecount.getName(), queryScopecount);

		QueryScope queryScopecount_exact_match = new QueryScope();
		queryScopecount_exact_match.setName("count_exact_match");

		queryScopes.put(queryScopecount_exact_match.getName(),
				queryScopecount_exact_match);

		QueryScope queryScopefx_payments = new QueryScope();
		queryScopefx_payments.setName("fx_payments");

		QueryField queryFieldCitiRef515656447 = new QueryField();
		queryFieldCitiRef515656447.setIsAssignable(true);
		queryFieldCitiRef515656447.setFieldName("citi_ref");
		queryFieldCitiRef515656447.setParamName("citi_ref");
		try {
			queryFieldCitiRef515656447.setValue("");
		} catch (UnassignableQueryFieldException e) {
			// Need to handle this.
		}
		queryScopefx_payments.getQueryFields().put(
				queryFieldCitiRef515656447.getParamName(),
				queryFieldCitiRef515656447);

		QueryField queryFieldCustomerTxnRef515656452 = new QueryField();
		queryFieldCustomerTxnRef515656452.setIsAssignable(true);
		queryFieldCustomerTxnRef515656452.setFieldName("customer_txn_ref");
		queryFieldCustomerTxnRef515656452.setParamName("customer_txn_ref");
		try {
			queryFieldCustomerTxnRef515656452.setValue("");
		} catch (UnassignableQueryFieldException e) {
			// Need to handle this.
		}
		queryScopefx_payments.getQueryFields().put(
				queryFieldCustomerTxnRef515656452.getParamName(),
				queryFieldCustomerTxnRef515656452);

		QueryField queryFieldToCurrency515656456 = new QueryField();
		queryFieldToCurrency515656456.setIsAssignable(true);
		queryFieldToCurrency515656456.setFieldName("to_currency");
		queryFieldToCurrency515656456.setParamName("to_currency");
		try {
			queryFieldToCurrency515656456.setValue("");
		} catch (UnassignableQueryFieldException e) {
			// Need to handle this.
		}
		queryScopefx_payments.getQueryFields().put(
				queryFieldToCurrency515656456.getParamName(),
				queryFieldToCurrency515656456);

		QueryField queryFieldBeneficiaryName515656460 = new QueryField();
		queryFieldBeneficiaryName515656460.setIsAssignable(true);
		queryFieldBeneficiaryName515656460.setFieldName("beneficiary_name");
		queryFieldBeneficiaryName515656460.setParamName("beneficiary_name");
		try {
			queryFieldBeneficiaryName515656460.setValue("");
		} catch (UnassignableQueryFieldException e) {
			// Need to handle this.
		}
		queryScopefx_payments.getQueryFields().put(
				queryFieldBeneficiaryName515656460.getParamName(),
				queryFieldBeneficiaryName515656460);

		QueryField queryFieldValueDate515656466 = new QueryField();
		queryFieldValueDate515656466.setIsAssignable(true);
		queryFieldValueDate515656466.setFieldName("value_date");
		queryFieldValueDate515656466.setParamName("value_date");
		try {
			queryFieldValueDate515656466.setValue("");
		} catch (UnassignableQueryFieldException e) {
			// Need to handle this.
		}
		queryScopefx_payments.getQueryFields().put(
				queryFieldValueDate515656466.getParamName(),
				queryFieldValueDate515656466);

		queryScopes.put(queryScopefx_payments.getName(), queryScopefx_payments);

	}

	/**
	 * Fetches a <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>objectId</tt>.
	 *
	 * @param objectId the id of the object
	 * @return an instance of <tt>CorporatePaymentsCrossBorderFxPayment</tt>
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static CorporatePaymentsCrossBorderFxPayment fetch(String objectId)
			throws RemoteRequestException {
		RemoteRequest.RemoteRequestBuilder remoteRequestBuilder = RemoteRailsConfig
				.getRouterAdapterByClassOrUseDefaultAdapter(
						CorporatePaymentsCrossBorderFxPayment.class)
				.createRemoteRequestBuilder(RequestMethod.GET,
						CorporatePaymentsCrossBorderFxPayment.class);

		CorporatePaymentsCrossBorderFxPayment object = new CorporatePaymentsCrossBorderFxPayment();
		object.setObjectIdAsString(objectId);

		remoteRequestBuilder.context(object);

		RemoteRequest remoteRequest = remoteRequestBuilder
				.createRemoteRequest();
		remoteRequest = Utility.interpolateRemoteRequest(remoteRequest);

		return com.anypresence.sdk.APObject.fetch(remoteRequest,
				CorporatePaymentsCrossBorderFxPayment.class);
	}

	/**
	 * Fetches a <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>objectId</tt> in the background.
	 *
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * CorporatePaymentsCrossBorderFxPayment.fetchInBackground("123", new APCallback<CorporatePaymentsCrossBorderFxPayment>() {
	 *     
	 *     public void finished(CorporatePaymentsCrossBorderFxPayment object, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Object fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch object!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param objectId the id of the object
	 * @param futureCallback the callback that handles the result of the request.
	
	 * @return the cached <tt>CorporatePaymentsCrossBorderFxPayment</tt> if it exists, otherwise, null.
	
	 */
	public static CorporatePaymentsCrossBorderFxPayment

	fetchInBackground(
			String objectId,
			IAPFutureCallback<CorporatePaymentsCrossBorderFxPayment> futureCallback) {

		return com.anypresence.sdk.APObject.fetchInBackground(objectId,
				CorporatePaymentsCrossBorderFxPayment.class, futureCallback);

	}

	/**
	 * Queries for <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>scope</tt>.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> query(String scope)
			throws RemoteRequestException {
		return query(scope, null, null, null);
	}

	/**
	 * Queries for <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> query(
			String scope, Map<String, String> params, Integer offset,
			Integer limit) throws RemoteRequestException {
		RemoteRequest.RemoteRequestBuilder remoteRequestBuilder = RemoteRailsConfig
				.getRouterAdapterByClassOrUseDefaultAdapter(
						CorporatePaymentsCrossBorderFxPayment.class)
				.createRemoteRequestBuilder(scope, RequestMethod.GET,
						CorporatePaymentsCrossBorderFxPayment.class);
		remoteRequestBuilder.query(scope);
		if (params != null) {
			remoteRequestBuilder.addToParameters(params);
			remoteRequestBuilder.context(params);
		}
		if (offset != null) {
			remoteRequestBuilder.addToParameters("offset", offset.toString());
		}

		if (limit != null) {
			remoteRequestBuilder.addToParameters("limit", limit.toString());
		}
		RemoteRequest remoteRequest = remoteRequestBuilder
				.createRemoteRequest();

		return com.anypresence.sdk.APObject.query(remoteRequest, offset, limit,
				CorporatePaymentsCrossBorderFxPayment.class);
	}

	/**
	 * Queries for <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> query(
			String scope, Map<String, String> params)
			throws RemoteRequestException {
		return query(scope, params, null, null);
	}

	/**
	 * Queries for <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> queryInBackground(
			final String scope,
			Map<String, String> params,
			IAPFutureCallback<List<CorporatePaymentsCrossBorderFxPayment>> futureCallback) {

		return queryInBackground(scope, params, null, null, futureCallback);

	}

	/**
	 * Queries for <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * CorporatePaymentsCrossBorderFxPayment.queryInBackground("all", new APCallback<List<CorporatePaymentsCrossBorderFxPayment>>() {
	 *     
	 *     public void finished(List<CorporatePaymentsCrossBorderFxPayment> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param futureCallback the callback that handles the result of the request.
	 * @return list of cached <tt>CorporatePaymentsCrossBorderFxPayment</tt> objects.
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> queryInBackground(
			String scope,
			IAPFutureCallback<List<CorporatePaymentsCrossBorderFxPayment>> futureCallback) {

		return queryInBackground(scope, null, null, null, futureCallback);

	}

	/**
	 * Queries for <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * CorporatePaymentsCrossBorderFxPayment.queryInBackground("all", 0, 25, new APCallback<List<CorporatePaymentsCrossBorderFxPayment>>() {
	 *     
	 *     public void finished(List<CorporatePaymentsCrossBorderFxPayment> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @param futureCallback the callback that handles the result of the request.
	 * @return list of cached <tt>CorporatePaymentsCrossBorderFxPayment</tt> objects.
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> queryInBackground(
			String scope,
			Integer offset,
			Integer limit,
			IAPFutureCallback<List<CorporatePaymentsCrossBorderFxPayment>> futureCallback) {

		return queryInBackground(scope, null, offset, limit, futureCallback);

	}

	/**
	 * Queries for <tt>CorporatePaymentsCrossBorderFxPayment</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * params.put("name", "test");
	 * CorporatePaymentsCrossBorderFxPayment.queryInBackground("all", params, 0, 25, new APCallback<List<CorporatePaymentsCrossBorderFxPayment>>() {
	 *     
	 *     public void finished(List<CorporatePaymentsCrossBorderFxPayment> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @param futureCallback the callback that handles the result of the request.
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> queryInBackground(
			final String scope,
			Map<String, String> params,
			Integer offset,
			Integer limit,
			IAPFutureCallback<List<CorporatePaymentsCrossBorderFxPayment>> futureCallback) {

		RemoteRequest.RemoteRequestBuilder remoteRequestBuilder = RemoteRailsConfig
				.getRouterAdapterByClassOrUseDefaultAdapter(
						CorporatePaymentsCrossBorderFxPayment.class)
				.createRemoteRequestBuilder(scope, RequestMethod.GET,
						CorporatePaymentsCrossBorderFxPayment.class);
		remoteRequestBuilder.query(scope);
		if (params != null) {
			remoteRequestBuilder.addToParameters(params);
			remoteRequestBuilder.context(params);
		}

		if (offset != null) {
			remoteRequestBuilder.addToParameters("offset", offset.toString());
		}

		if (limit != null) {
			remoteRequestBuilder.addToParameters("limit", limit.toString());
		}

		RemoteRequest remoteRequest = remoteRequestBuilder
				.createRemoteRequest();

		if (DEBUG_MODE) {
			System.out.println(ReflectionToStringBuilder
					.reflectionToString(remoteRequest));
		}

		return com.anypresence.sdk.APObject.queryInBackground(remoteRequest,
				CorporatePaymentsCrossBorderFxPayment.class, futureCallback);

	}

	/**
	 * Performs aggregate query with the provided <tt>scope</tt>.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static String aggregateQuery(String scope, Map<String, String> params)
			throws RemoteRequestException {
		return com.anypresence.sdk.APObject.aggregateQuery(scope, params,
				CorporatePaymentsCrossBorderFxPayment.class);
	}

	/**
	 * Performs aggregate query with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * CorporatePaymentsCrossBorderFxPayment.aggregateQueryInBackground("count", params, new APCallback<String>() {
	 *     
	 *     public void finished(String count, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "success");
	 *         } else {
	 *             Log.e(TAG, "failure", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param futureCallback the callback that handles the result of the request.
	 */
	public static void aggregateQueryInBackground(String scope,
			Map<String, String> params, IAPFutureCallback<String> futureCallback) {
		com.anypresence.sdk.APObject.aggregateQueryInBackground(scope, params,
				CorporatePaymentsCrossBorderFxPayment.class, futureCallback);
	}

	/**
	 * Deletes all data in cache for <tt>CorporatePaymentsCrossBorderFxPayment</tt>.
	 */
	public static void deleteAllInCache() {
		com.anypresence.sdk.APObject.deleteAllInCache();
	}

	/**
	 * Loads all <tt>CorporatePaymentsCrossBorderFxPayment</tt> objects in local cache.
	 *
	 * @return list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> loadAllInCache() {
		return com.anypresence.sdk.APSDKSetup.getCacheManager().loadAllInCache(
				CorporatePaymentsCrossBorderFxPayment.class);
	}

	/**
	 * Loads <tt>CorporatePaymentsCrossBorderFxPayment</tt> objects in local cache.
	 *
	 * @param offset the offset
	 * @param limit the limit
	 * @return list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> loadInCache(
			Integer offset, Integer limit) {
		return null;
	}

	/**
	 * Updates object in cache if the object id is not null.
	 */
	public void updateInCache() {
		com.anypresence.sdk.APSDKSetup.getCacheManager().updateInCache(
				CorporatePaymentsCrossBorderFxPayment.class, this);
	}

	/**
	 * Saves object into cache.
	 */
	public void saveInCache() {
		saveInCache(null);
	}

	/**
	 * Saves object into cache with provided scope.
	 */
	public void saveInCache(String scope) {
		com.anypresence.sdk.APSDKSetup.getCacheManager().saveInCache(
				CorporatePaymentsCrossBorderFxPayment.class, this, scope);
	}

	/**
	 * Saves object into cache with provided <tt>APCachedRequest</tt>.
	 */
	public void saveInCacheWithRequest(IAPCachedRequest request) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.saveInCacheWithRequest(
						CorporatePaymentsCrossBorderFxPayment.class, this,
						request);
	}

	/**
	 * Deletes all <tt>CorporatePaymentsCrossBorderFxPayment</tt> objects in cache that has
	 * this instance's object id.
	 */
	public void deleteInCache() {
		if (this.getObjectId() != null) {
			deleteAllInCacheWithObjectIdPredicate(this.getObjectId()
					.stringify());
		} else {
			log.info("Cannot delete in local cache since the objectId is not set");
		}
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache with provided remote object id.
	 * 
	 * @param objectId the remote object id.
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>;
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithObjectIdPredicate(
			String objectId) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithObjectIdPredicate(
						CorporatePaymentsCrossBorderFxPayment.class, objectId);
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache by searching for requests matching 
	 * the exact scope and parameters provided.
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * params.put("name", "test");
	 * CorporatePaymentsCrossBorderFxPayment.queryInBackground("all", params, new APCallback<List<CorporatePaymentsCrossBorderFxPayment>>() {
	 *     
	 *     public void finished(List<CorporatePaymentsCrossBorderFxPayment> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * // Get the cached objects from the above query.
	 * CorporatePaymentsCrossBorderFxPayment.fetchInCacheWithParameterPredicate("all", params);
	 * }
	 *
	 * </pre>
	 * 
	 * @param scope the scope 
	 * @param params the parameter
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>;
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithParameterPredicate(
			String scope, Map<String, String> params) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithParameterPredicate(
						CorporatePaymentsCrossBorderFxPayment.class, scope,
						params);
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>;
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithScopePredicate(
			String scope, Integer offset, Integer limit) {
		return fetchInCacheWithScopePredicate(scope, null, offset, limit);
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>;
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithScopePredicate(
			String scope) {
		return fetchInCacheWithScopePredicate(scope, null, null);
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache with provided scope.
	 * 
	 * @param scope the scope
	 * @param params the parameters
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>;
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithScopePredicate(
			String scope, Map<String, String> params) {
		return fetchInCacheWithScopePredicate(scope, params, null, null);
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @param params the parameters
	 * @param offset the offset
	 * @param limit the limit
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>;
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithScopePredicate(
			String scope, Map<String, String> params, Integer offset,
			Integer limit) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithScopePredicate(
						CorporatePaymentsCrossBorderFxPayment.class, scope,
						params, offset, limit);
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache with provided request.
	 * 
	 * @param request instance of <tt>com.anypresence.anypresence_inc.citi_mobile_challenge.dao.APCachedRequest</tt>.
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>;
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithAPCachedRequestPredicate(
			IAPCachedRequest request) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithAPCachedRequestPredicate(
						CorporatePaymentsCrossBorderFxPayment.class, request);
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache with latest request.
	 * 
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>;
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithLatestAPCachedRequestPredicate(
			String scope, Map<String, String> params, Integer offset,
			Integer limit) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithLatestAPCachedRequestPredicate(
						CorporatePaymentsCrossBorderFxPayment.class, scope,
						params, offset, limit);
	}

	/**
	 * Fetches <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache with predicates.
	 *
	 * @see com.anypresence.anypresence_inc.citi_mobile_challenge.dao.CorporatePaymentsCrossBorderFxPaymentDao.Properties
	 *
	 * @param predicates hash of predicates
	 * @return a list of <tt>CorporatePaymentsCrossBorderFxPayment</tt>
	 */
	public static List<CorporatePaymentsCrossBorderFxPayment> fetchInCacheWithPredicates(
			Map<String, String> predicates) {
		return com.anypresence.sdk.APSDKSetup
				.getCacheManager()
				.fetchInCacheWithPredicates(
						CorporatePaymentsCrossBorderFxPayment.class, predicates);
	}

	/**
	 * Deletes <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache matching <tt>objectId</tt>.
	 * 
	 * @param objectId the remote object id.
	 */
	public static void deleteAllInCacheWithObjectIdPredicate(String objectId) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.deleteAllInCacheWithObjectIdPredicate(
						CorporatePaymentsCrossBorderFxPayment.class, objectId);
	}

	/**
	 * Deletes <tt>CorporatePaymentsCrossBorderFxPayment</tt> from cache matching <tt>scope</tt>.
	 * 
	 * @param scope the scope.
	 */
	public static void deleteAllInCacheWithScopePredicate(String scope) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.deleteAllInCacheWithScopePredicate(
						CorporatePaymentsCrossBorderFxPayment.class, scope);
	}

	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 37).

		append(beneficiaryAccount).

		append(beneficiaryAddress).

		append(beneficiaryBank).

		append(beneficiaryName).

		append(citiRef).

		append(createdBy).

		append(createdOn).

		append(customerTxnRef).

		append(debtorAccount).

		append(debtorAddress).

		append(debtorName).

		append(fromAmount).

		append(fromCurrency).

		append(paymentDetails).

		append(rateReference).

		append(status).

		append(toAmount).

		append(toCurrency).

		append(valueDate).

		append(getObjectId()).toHashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if ((obj == null) || (obj.getClass() != this.getClass()))
			return false;
		CorporatePaymentsCrossBorderFxPayment other = (CorporatePaymentsCrossBorderFxPayment) obj;
		return new EqualsBuilder().

		append(beneficiaryAccount, other.beneficiaryAccount).

		append(beneficiaryAddress, other.beneficiaryAddress).

		append(beneficiaryBank, other.beneficiaryBank).

		append(beneficiaryName, other.beneficiaryName).

		append(citiRef, other.citiRef).

		append(createdBy, other.createdBy).

		append(createdOn, other.createdOn).

		append(customerTxnRef, other.customerTxnRef).

		append(debtorAccount, other.debtorAccount).

		append(debtorAddress, other.debtorAddress).

		append(debtorName, other.debtorName).

		append(fromAmount, other.fromAmount).

		append(fromCurrency, other.fromCurrency).

		append(paymentDetails, other.paymentDetails).

		append(rateReference, other.rateReference).

		append(status, other.status).

		append(toAmount, other.toAmount).

		append(toCurrency, other.toCurrency).

		append(valueDate, other.valueDate).

		append(getObjectId(), other.getObjectId()).isEquals();
	}

	// Backend on Device
	public static String MAPPING = "CorporatePaymentsCrossBorderFxPayment";
	public static String BASE_URL = "";
	public static String PORT = "";
	public static String PREFIX = "";
	public static String QUERY_PREFIX = "";
	public static boolean USE_SUFFIX = false;

	/**
	 * Deprecated: Pulled up into HttpAdapter
	 */
	@Override
	@Deprecated
	public String requestMapping() {
		return MAPPING;
	}

	/**
	 * Deprecated: Pulled up into HttpAdapter
	 */
	@Override
	@Deprecated
	public String requestBaseUrl() throws MalformedURLException {
		return BASE_URL;
	}

	/**
	 * Deprecated: Pulled up into HttpAdapter
	 */
	@Override
	@Deprecated
	public String requestPrefix() {
		return PREFIX;
	}

	/**
	 * Deprecated: Pulled up into HttpAdapter
	 */
	@Deprecated
	public static String requestQueryPrefix() {
		if (QUERY_PREFIX.isEmpty()) {
			return "%s";
		}
		return QUERY_PREFIX + "[%s]";
	}

	@Override
	public String serialize() {
		String bodyFormat = getSerializationBodyFormat();
		SerializerBuilder builder = null;

		String recordSelector = HttpAdapter.createResponseWrangling(this)
				.getRecordSelector();
		if (XML.equals(bodyFormat)) {
			builder = new XmlSerializer.XmlSerializerBuilder(recordSelector);
		} else if (JSON.equals(bodyFormat)) {
			builder = new JsonSerializer.JsonSerializerBuilder(recordSelector);
		} else if (FORM_ENCODED.equals(bodyFormat)) {
			builder = new FormEncodedSerializer.FormEncodedSerializerBuilder(
					recordSelector);
		}

		final RouterAdapter routerAdapter = RemoteRailsConfig
				.getRouterAdapterByClass(this.getClass());
		if (builder != null && routerAdapter != null) {

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("id"), "id");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("beneficiary_account"),
					"beneficiary_account");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("beneficiary_address"),
					"beneficiary_address");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("beneficiary_bank"),
					"beneficiary_bank");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("beneficiary_name"),
					"beneficiary_name");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("citi_ref"), "citi_ref");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("created_by"), "created_by");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("created_on"), "created_on");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("customer_txn_ref"),
					"customer_txn_ref");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("debtor_account"),
					"debtor_account");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("debtor_address"),
					"debtor_address");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("debtor_name"), "debtor_name");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("from_amount"), "from_amount");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("from_currency"),
					"from_currency");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("payment_details"),
					"payment_details");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("rate_reference"),
					"rate_reference");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("status"), "status");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("to_amount"), "to_amount");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("to_currency"), "to_currency");

			builder.addFieldMapping(((HttpAdapter) routerAdapter)
					.getConfigurationsAsConfiguration("POST")
					.getResponseRemoteFieldName("value_date"), "value_date");

			return builder.create().serialize(this);
		} else {
			return super.serialize();
		}
	}

	@Override
	public ArrayList<RemoteObject> deserializeArray(String queryScope,
			String input) {
		String bodyFormat = getDeserializationBodyFormat();
		if (XML.equals(bodyFormat)) {
			return deserializeArrayAsXml(queryScope, input);
		} else if (JSON.equals(bodyFormat)) {
			return deserializeArrayAsJson(queryScope, input);
		} else {
			return deserializeArrayAsJson(queryScope, input);
		}
	}

	@Override
	public ArrayList<RemoteObject> deserializeArray(String input) {
		return deserializeArray("", input);
	}

	private ArrayList<RemoteObject> deserializeArrayAsXml(String queryScope,
			String input) {
		ArrayList<RemoteObject> objects = new ArrayList<RemoteObject>();

		XmlParser parser = new XmlParser(input);
		XmlElement parent = ((XmlElement) parser.parse(HttpAdapter
				.createResponseWrangling(queryScope, this)
				.getCollectionSelector(), XmlElement.class)).getParent();
		for (int i = 0; i < parent.getChildCount(); i++) {
			objects.add(deserialize(queryScope, new XmlParser(parent.get(i))));
		}

		return objects;
	}

	private ArrayList<RemoteObject> deserializeArrayAsJson(String queryScope,
			String input) {
		ArrayList<RemoteObject> objects = new ArrayList<RemoteObject>();

		JsonParser parser = new JsonParser(input);
		JsonArray parent = ((JsonElement) parser.parse(HttpAdapter
				.createResponseWrangling(queryScope, this)
				.getCollectionSelector(), JsonElement.class)).getAsJsonArray();
		for (int i = 0; i < parent.size(); i++) {
			objects.add(deserialize(queryScope, new JsonParser(parent.get(i))));
		}

		return objects;
	}

	@Override
	public String getDeserializationBodyFormat() {
		final HttpAdapter routerAdapter = (HttpAdapter) RemoteRailsConfig
				.getRouterAdapterByClass(this.getClass());
		if (routerAdapter == null
				|| routerAdapter.getConfigurationsAsConfiguration("GET") == null) {
			return RemoteRailsConfig.getInstance().getDefaultRouterAdapter()
					.getSuffix();
		}
		return routerAdapter.getConfigurationsAsConfiguration("GET")
				.getBodyFormat();
	}

	@Override
	public String getSerializationBodyFormat() {
		final HttpAdapter routerAdapter = (HttpAdapter) RemoteRailsConfig
				.getRouterAdapterByClass(this.getClass());
		if (routerAdapter == null
				|| routerAdapter.getConfigurationsAsConfiguration("GET") == null) {
			return RemoteRailsConfig.getInstance().getDefaultRouterAdapter()
					.getSuffix();
		}
		return routerAdapter.getConfigurationsAsConfiguration("POST")
				.getBodyFormat();
	}

	@Override
	public RemoteObject deserialize(String queryScope, String input) {
		String bodyFormat = getDeserializationBodyFormat();
		// TODO parse role if auth object
		Parser parser = null;
		if (XML.equals(bodyFormat)) {
			parser = createXmlParser(queryScope, input);
		} else if (JSON.equals(bodyFormat)) {
			parser = createJsonParser(queryScope, input);
		} else {
			parser = createJsonParser(queryScope, input);
		}

		return deserialize(queryScope, parser);
	}

	@Override
	public RemoteObject deserialize(String input) {
		return deserialize("", input);
	}

	private Parser createXmlParser(String queryScope, String input) {
		Parser parser = new XmlParser(input);
		if (!HttpAdapter.createResponseWrangling(queryScope, this)
				.getRecordSelector().isEmpty()) {
			((XmlParser) parser).setRootElement(parser.parse(HttpAdapter
					.createResponseWrangling(queryScope, this)
					.getRecordSelector(), XmlElement.class));
		}
		return parser;
	}

	private Parser createJsonParser(String queryScope, String input) {
		Parser parser = new JsonParser(input);
		if (!HttpAdapter.createResponseWrangling(queryScope, this)
				.getRecordSelector().isEmpty()) {
			((JsonParser) parser).setRootElement(parser.parse(HttpAdapter
					.createResponseWrangling(queryScope, this)
					.getRecordSelector(), JsonElement.class));
		}
		return parser;
	}

	public RemoteObject deserialize(String queryScope, Parser parser) {
		final RouterAdapter routerAdapter = RemoteRailsConfig
				.getRouterAdapterByClass(this.getClass());
		CorporatePaymentsCrossBorderFxPayment object = new CorporatePaymentsCrossBorderFxPayment();
		HttpAdapter.Configuration configuration = null;
		if ((routerAdapter != null) && (routerAdapter instanceof HttpAdapter)) {
			if (queryScope != null && !queryScope.isEmpty()) {
				configuration = ((HttpAdapter) routerAdapter)
						.getScopedConfigurationsByNameAsConfiguration(queryScope);
			} else {
				configuration = ((HttpAdapter) routerAdapter)
						.getConfigurationsAsConfiguration("GET");
			}
		}
		if (configuration != null) {

			try {

				object.id = parser.parse(
						configuration.getResponseRemoteFieldName("id"),
						ObjectId.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.beneficiaryAccount = parser.parse(configuration
						.getResponseRemoteFieldName("beneficiary_account"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.beneficiaryAddress = parser.parse(configuration
						.getResponseRemoteFieldName("beneficiary_address"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.beneficiaryBank = parser.parse(configuration
						.getResponseRemoteFieldName("beneficiary_bank"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.beneficiaryName = parser.parse(configuration
						.getResponseRemoteFieldName("beneficiary_name"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.citiRef = parser.parse(
						configuration.getResponseRemoteFieldName("citi_ref"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.createdBy = parser.parse(
						configuration.getResponseRemoteFieldName("created_by"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.createdOn = parser.parse(
						configuration.getResponseRemoteFieldName("created_on"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.customerTxnRef = parser.parse(configuration
						.getResponseRemoteFieldName("customer_txn_ref"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.debtorAccount = parser.parse(configuration
						.getResponseRemoteFieldName("debtor_account"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.debtorAddress = parser.parse(configuration
						.getResponseRemoteFieldName("debtor_address"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.debtorName = parser
						.parse(configuration
								.getResponseRemoteFieldName("debtor_name"),
								String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.fromAmount = parser
						.parse(configuration
								.getResponseRemoteFieldName("from_amount"),
								Float.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.fromCurrency = parser.parse(configuration
						.getResponseRemoteFieldName("from_currency"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.paymentDetails = parser.parse(configuration
						.getResponseRemoteFieldName("payment_details"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.rateReference = parser.parse(configuration
						.getResponseRemoteFieldName("rate_reference"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.status = parser.parse(
						configuration.getResponseRemoteFieldName("status"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.toAmount = parser.parse(
						configuration.getResponseRemoteFieldName("to_amount"),
						Float.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.toCurrency = parser
						.parse(configuration
								.getResponseRemoteFieldName("to_currency"),
								String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

			try {

				object.valueDate = parser.parse(
						configuration.getResponseRemoteFieldName("value_date"),
						String.class);

			} catch (PathNotFoundException e) {
				log.info("Unable to deserialize field: " + e.getMessage());
			}

		} else {
			// Default to use gson deserializer
			String json = "";
			if (parser instanceof JsonParser) {
				json = ((JsonParser) parser).getRootElement().toString();
			}

			object = (CorporatePaymentsCrossBorderFxPayment) Utilities
					.transformJsonToObject(json, this.getClass());
		}

		return object;
	}

}
